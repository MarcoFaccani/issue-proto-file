// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: v1/MyTest.proto

package customer_onboarding

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceStatus int32

const (
	ServiceStatus_UP   ServiceStatus = 0
	ServiceStatus_DOWN ServiceStatus = 1
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "UP",
		1: "DOWN",
	}
	ServiceStatus_value = map[string]int32{
		"UP":   0,
		"DOWN": 1,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_CustomerOnboardingService_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_v1_CustomerOnboardingService_proto_enumTypes[0]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{0}
}

type AccountType int32

const (
	AccountType_AT_UNSPECIFIED      AccountType = 0
	AccountType_AT_ACCOUNT_STANDARD AccountType = 1
	AccountType_AT_ACCOUNT_TRADING  AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "AT_UNSPECIFIED",
		1: "AT_ACCOUNT_STANDARD",
		2: "AT_ACCOUNT_TRADING",
	}
	AccountType_value = map[string]int32{
		"AT_UNSPECIFIED":      0,
		"AT_ACCOUNT_STANDARD": 1,
		"AT_ACCOUNT_TRADING":  2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_CustomerOnboardingService_proto_enumTypes[1].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_v1_CustomerOnboardingService_proto_enumTypes[1]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{1}
}

type VerifyOtpCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Otp         string      `protobuf:"bytes,1,opt,name=otp,proto3" json:"otp,omitempty"`
	TaxId       string      `protobuf:"bytes,2,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	AccountType AccountType `protobuf:"varint,3,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	TokenId     string      `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *VerifyOtpCodeRequest) Reset() {
	*x = VerifyOtpCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtpCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtpCodeRequest) ProtoMessage() {}

func (x *VerifyOtpCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtpCodeRequest.ProtoReflect.Descriptor instead.
func (*VerifyOtpCodeRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyOtpCodeRequest) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *VerifyOtpCodeRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *VerifyOtpCodeRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *VerifyOtpCodeRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type SendOtpCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId             string      `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	ProcedureId       string      `protobuf:"bytes,2,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	PhoneNumber       string      `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PrefixPhoneNumber string      `protobuf:"bytes,4,opt,name=prefix_phone_number,json=prefixPhoneNumber,proto3" json:"prefix_phone_number,omitempty"`
	Email             string      `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	AccountType       AccountType `protobuf:"varint,6,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	AbiOriginCode     *string     `protobuf:"bytes,7,opt,name=abi_origin_code,json=abiOriginCode,proto3,oneof" json:"abi_origin_code,omitempty"`
}

func (x *SendOtpCodeRequest) Reset() {
	*x = SendOtpCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOtpCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOtpCodeRequest) ProtoMessage() {}

func (x *SendOtpCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOtpCodeRequest.ProtoReflect.Descriptor instead.
func (*SendOtpCodeRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{1}
}

func (x *SendOtpCodeRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *SendOtpCodeRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *SendOtpCodeRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SendOtpCodeRequest) GetPrefixPhoneNumber() string {
	if x != nil {
		return x.PrefixPhoneNumber
	}
	return ""
}

func (x *SendOtpCodeRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SendOtpCodeRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *SendOtpCodeRequest) GetAbiOriginCode() string {
	if x != nil && x.AbiOriginCode != nil {
		return *x.AbiOriginCode
	}
	return ""
}

type SendOtpCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *SendOtpCodeResponse) Reset() {
	*x = SendOtpCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOtpCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOtpCodeResponse) ProtoMessage() {}

func (x *SendOtpCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOtpCodeResponse.ProtoReflect.Descriptor instead.
func (*SendOtpCodeResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{2}
}

func (x *SendOtpCodeResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type CreateProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId             string      `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	Email             string      `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PrefixPhoneNumber *string     `protobuf:"bytes,3,opt,name=prefix_phone_number,json=prefixPhoneNumber,proto3,oneof" json:"prefix_phone_number,omitempty"`
	PhoneNumber       *string     `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	AccountType       AccountType `protobuf:"varint,5,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
}

func (x *CreateProcedureRequest) Reset() {
	*x = CreateProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcedureRequest) ProtoMessage() {}

func (x *CreateProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcedureRequest.ProtoReflect.Descriptor instead.
func (*CreateProcedureRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{3}
}

func (x *CreateProcedureRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *CreateProcedureRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateProcedureRequest) GetPrefixPhoneNumber() string {
	if x != nil && x.PrefixPhoneNumber != nil {
		return *x.PrefixPhoneNumber
	}
	return ""
}

func (x *CreateProcedureRequest) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *CreateProcedureRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

type StatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string        `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Status  ServiceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=customer.onboarding.ServiceStatus" json:"status,omitempty"`
}

func (x *StatusReply) Reset() {
	*x = StatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReply) ProtoMessage() {}

func (x *StatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReply.ProtoReflect.Descriptor instead.
func (*StatusReply) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{4}
}

func (x *StatusReply) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *StatusReply) GetStatus() ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_UP
}

type CreateCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId string `protobuf:"bytes,1,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	MykeyActive bool   `protobuf:"varint,2,opt,name=mykey_active,json=mykeyActive,proto3" json:"mykey_active,omitempty"`
}

func (x *CreateCustomerResponse) Reset() {
	*x = CreateCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomerResponse) ProtoMessage() {}

func (x *CreateCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomerResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomerResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCustomerResponse) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *CreateCustomerResponse) GetMykeyActive() bool {
	if x != nil {
		return x.MykeyActive
	}
	return false
}

type CreateProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId   string  `protobuf:"bytes,1,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	AbiOriginCode *string `protobuf:"bytes,2,opt,name=abi_origin_code,json=abiOriginCode,proto3,oneof" json:"abi_origin_code,omitempty"`
}

func (x *CreateProcedureResponse) Reset() {
	*x = CreateProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcedureResponse) ProtoMessage() {}

func (x *CreateProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcedureResponse.ProtoReflect.Descriptor instead.
func (*CreateProcedureResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{6}
}

func (x *CreateProcedureResponse) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *CreateProcedureResponse) GetAbiOriginCode() string {
	if x != nil && x.AbiOriginCode != nil {
		return *x.AbiOriginCode
	}
	return ""
}

type SaveMifidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId          string      `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	ProfessionCode string      `protobuf:"bytes,2,opt,name=profession_code,json=professionCode,proto3" json:"profession_code,omitempty"` //from domain e.g. 04
	Surname        string      `protobuf:"bytes,3,opt,name=surname,proto3" json:"surname,omitempty"`
	Name           string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	BirthDate      string      `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`                                             // 1990-12-31
	Gender         string      `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`                                                                    // e.g. M or F
	AccountType    AccountType `protobuf:"varint,7,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"` // already used -  enum
	Mifid          *Mifid      `protobuf:"bytes,8,opt,name=mifid,proto3" json:"mifid,omitempty"`
	ProcedureId    string      `protobuf:"bytes,9,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
}

func (x *SaveMifidRequest) Reset() {
	*x = SaveMifidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMifidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMifidRequest) ProtoMessage() {}

func (x *SaveMifidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMifidRequest.ProtoReflect.Descriptor instead.
func (*SaveMifidRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{7}
}

func (x *SaveMifidRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *SaveMifidRequest) GetProfessionCode() string {
	if x != nil {
		return x.ProfessionCode
	}
	return ""
}

func (x *SaveMifidRequest) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *SaveMifidRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaveMifidRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *SaveMifidRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *SaveMifidRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *SaveMifidRequest) GetMifid() *Mifid {
	if x != nil {
		return x.Mifid
	}
	return nil
}

func (x *SaveMifidRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{8}
}

func (x *Answer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Answer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type QuestionsAndAnswers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question string    `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answers  []*Answer `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *QuestionsAndAnswers) Reset() {
	*x = QuestionsAndAnswers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionsAndAnswers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionsAndAnswers) ProtoMessage() {}

func (x *QuestionsAndAnswers) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionsAndAnswers.ProtoReflect.Descriptor instead.
func (*QuestionsAndAnswers) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{9}
}

func (x *QuestionsAndAnswers) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionsAndAnswers) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type Mifid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionsAndAnswers []*QuestionsAndAnswers `protobuf:"bytes,1,rep,name=questionsAndAnswers,proto3" json:"questionsAndAnswers,omitempty"`
}

func (x *Mifid) Reset() {
	*x = Mifid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mifid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mifid) ProtoMessage() {}

func (x *Mifid) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mifid.ProtoReflect.Descriptor instead.
func (*Mifid) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{10}
}

func (x *Mifid) GetQuestionsAndAnswers() []*QuestionsAndAnswers {
	if x != nil {
		return x.QuestionsAndAnswers
	}
	return nil
}

type SaveMifidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       int32  `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	ModuleId    string `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	RiskProfile string `protobuf:"bytes,3,opt,name=risk_profile,json=riskProfile,proto3" json:"risk_profile,omitempty"`
}

func (x *SaveMifidResponse) Reset() {
	*x = SaveMifidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMifidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMifidResponse) ProtoMessage() {}

func (x *SaveMifidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMifidResponse.ProtoReflect.Descriptor instead.
func (*SaveMifidResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{11}
}

func (x *SaveMifidResponse) GetToken() int32 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *SaveMifidResponse) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *SaveMifidResponse) GetRiskProfile() string {
	if x != nil {
		return x.RiskProfile
	}
	return ""
}

type NormalizeAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId       string              `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	Address     *UserEnteredAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AccountType AccountType         `protobuf:"varint,3,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	ProcedureId string              `protobuf:"bytes,4,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
}

func (x *NormalizeAddressRequest) Reset() {
	*x = NormalizeAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeAddressRequest) ProtoMessage() {}

func (x *NormalizeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeAddressRequest.ProtoReflect.Descriptor instead.
func (*NormalizeAddressRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{12}
}

func (x *NormalizeAddressRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *NormalizeAddressRequest) GetAddress() *UserEnteredAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NormalizeAddressRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *NormalizeAddressRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

type UserEnteredAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street       string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	StreetNumber string `protobuf:"bytes,2,opt,name=street_number,json=streetNumber,proto3" json:"street_number,omitempty"`
	Fraction     string `protobuf:"bytes,3,opt,name=fraction,proto3" json:"fraction,omitempty"`
	Province     string `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	Locality     string `protobuf:"bytes,5,opt,name=locality,proto3" json:"locality,omitempty"`
	PostalCode   string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
}

func (x *UserEnteredAddress) Reset() {
	*x = UserEnteredAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEnteredAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEnteredAddress) ProtoMessage() {}

func (x *UserEnteredAddress) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEnteredAddress.ProtoReflect.Descriptor instead.
func (*UserEnteredAddress) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{13}
}

func (x *UserEnteredAddress) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *UserEnteredAddress) GetStreetNumber() string {
	if x != nil {
		return x.StreetNumber
	}
	return ""
}

func (x *UserEnteredAddress) GetFraction() string {
	if x != nil {
		return x.Fraction
	}
	return ""
}

func (x *UserEnteredAddress) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserEnteredAddress) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *UserEnteredAddress) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

type NormalizedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Toponym             string `protobuf:"bytes,1,opt,name=toponym,proto3" json:"toponym,omitempty"`
	Street              string `protobuf:"bytes,2,opt,name=street,proto3" json:"street,omitempty"`
	StreetNumber        string `protobuf:"bytes,3,opt,name=street_number,json=streetNumber,proto3" json:"street_number,omitempty"`
	City                string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Province            string `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	PostalCode          string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	NotResidentFlag     bool   `protobuf:"varint,7,opt,name=not_resident_flag,json=notResidentFlag,proto3" json:"not_resident_flag,omitempty"`
	RegisteredResidency bool   `protobuf:"varint,8,opt,name=registered_residency,json=registeredResidency,proto3" json:"registered_residency,omitempty"`
	ShortenedAddress    string `protobuf:"bytes,9,opt,name=shortened_address,json=shortenedAddress,proto3" json:"shortened_address,omitempty"`
	Normalized          bool   `protobuf:"varint,10,opt,name=normalized,proto3" json:"normalized,omitempty"`
	Forced              bool   `protobuf:"varint,11,opt,name=forced,proto3" json:"forced,omitempty"`
	Fraction            string `protobuf:"bytes,12,opt,name=fraction,proto3" json:"fraction,omitempty"`
}

func (x *NormalizedAddress) Reset() {
	*x = NormalizedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedAddress) ProtoMessage() {}

func (x *NormalizedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedAddress.ProtoReflect.Descriptor instead.
func (*NormalizedAddress) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{14}
}

func (x *NormalizedAddress) GetToponym() string {
	if x != nil {
		return x.Toponym
	}
	return ""
}

func (x *NormalizedAddress) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *NormalizedAddress) GetStreetNumber() string {
	if x != nil {
		return x.StreetNumber
	}
	return ""
}

func (x *NormalizedAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *NormalizedAddress) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *NormalizedAddress) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *NormalizedAddress) GetNotResidentFlag() bool {
	if x != nil {
		return x.NotResidentFlag
	}
	return false
}

func (x *NormalizedAddress) GetRegisteredResidency() bool {
	if x != nil {
		return x.RegisteredResidency
	}
	return false
}

func (x *NormalizedAddress) GetShortenedAddress() string {
	if x != nil {
		return x.ShortenedAddress
	}
	return ""
}

func (x *NormalizedAddress) GetNormalized() bool {
	if x != nil {
		return x.Normalized
	}
	return false
}

func (x *NormalizedAddress) GetForced() bool {
	if x != nil {
		return x.Forced
	}
	return false
}

func (x *NormalizedAddress) GetFraction() string {
	if x != nil {
		return x.Fraction
	}
	return ""
}

type UpdateImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId             string      `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	TypeCode          string      `protobuf:"bytes,2,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	Number            string      `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	IssuedBy          string      `protobuf:"bytes,4,opt,name=issued_by,json=issuedBy,proto3" json:"issued_by,omitempty"`
	IssueDate         string      `protobuf:"bytes,5,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ExpiryDate        string      `protobuf:"bytes,6,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	IssueProvinceCode string      `protobuf:"bytes,7,opt,name=issue_province_code,json=issueProvinceCode,proto3" json:"issue_province_code,omitempty"`
	IssuePlace        string      `protobuf:"bytes,8,opt,name=issue_place,json=issuePlace,proto3" json:"issue_place,omitempty"`
	IssueNation       string      `protobuf:"bytes,9,opt,name=issue_nation,json=issueNation,proto3" json:"issue_nation,omitempty"`
	ImagesBase64      string      `protobuf:"bytes,10,opt,name=images_base64,json=imagesBase64,proto3" json:"images_base64,omitempty"`
	ImageFormat       string      `protobuf:"bytes,11,opt,name=image_format,json=imageFormat,proto3" json:"image_format,omitempty"`
	AccountType       AccountType `protobuf:"varint,12,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	ProcedureId       string      `protobuf:"bytes,13,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
}

func (x *UpdateImageRequest) Reset() {
	*x = UpdateImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageRequest) ProtoMessage() {}

func (x *UpdateImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateImageRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *UpdateImageRequest) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *UpdateImageRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *UpdateImageRequest) GetIssuedBy() string {
	if x != nil {
		return x.IssuedBy
	}
	return ""
}

func (x *UpdateImageRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *UpdateImageRequest) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *UpdateImageRequest) GetIssueProvinceCode() string {
	if x != nil {
		return x.IssueProvinceCode
	}
	return ""
}

func (x *UpdateImageRequest) GetIssuePlace() string {
	if x != nil {
		return x.IssuePlace
	}
	return ""
}

func (x *UpdateImageRequest) GetIssueNation() string {
	if x != nil {
		return x.IssueNation
	}
	return ""
}

func (x *UpdateImageRequest) GetImagesBase64() string {
	if x != nil {
		return x.ImagesBase64
	}
	return ""
}

func (x *UpdateImageRequest) GetImageFormat() string {
	if x != nil {
		return x.ImageFormat
	}
	return ""
}

func (x *UpdateImageRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *UpdateImageRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

type Profession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EducationQualification string  `protobuf:"bytes,1,opt,name=education_qualification,json=educationQualification,proto3" json:"education_qualification,omitempty"`
	ProfessionCode         string  `protobuf:"bytes,2,opt,name=profession_code,json=professionCode,proto3" json:"profession_code,omitempty"`
	OtherProfession        *string `protobuf:"bytes,3,opt,name=other_profession,json=otherProfession,proto3,oneof" json:"other_profession,omitempty"`
	ActivityNatureCode     string  `protobuf:"bytes,4,opt,name=activity_nature_code,json=activityNatureCode,proto3" json:"activity_nature_code,omitempty"`
	ActivityProvince       string  `protobuf:"bytes,5,opt,name=activity_province,json=activityProvince,proto3" json:"activity_province,omitempty"`
	ActivityNation         string  `protobuf:"bytes,6,opt,name=activity_nation,json=activityNation,proto3" json:"activity_nation,omitempty"`
}

func (x *Profession) Reset() {
	*x = Profession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profession) ProtoMessage() {}

func (x *Profession) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profession.ProtoReflect.Descriptor instead.
func (*Profession) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{16}
}

func (x *Profession) GetEducationQualification() string {
	if x != nil {
		return x.EducationQualification
	}
	return ""
}

func (x *Profession) GetProfessionCode() string {
	if x != nil {
		return x.ProfessionCode
	}
	return ""
}

func (x *Profession) GetOtherProfession() string {
	if x != nil && x.OtherProfession != nil {
		return *x.OtherProfession
	}
	return ""
}

func (x *Profession) GetActivityNatureCode() string {
	if x != nil {
		return x.ActivityNatureCode
	}
	return ""
}

func (x *Profession) GetActivityProvince() string {
	if x != nil {
		return x.ActivityProvince
	}
	return ""
}

func (x *Profession) GetActivityNation() string {
	if x != nil {
		return x.ActivityNation
	}
	return ""
}

type Declarations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsResidency                bool    `protobuf:"varint,1,opt,name=us_residency,json=usResidency,proto3" json:"us_residency,omitempty"`
	NationCodeFiscalResidency1 string  `protobuf:"bytes,2,opt,name=nation_code_fiscal_residency1,json=nationCodeFiscalResidency1,proto3" json:"nation_code_fiscal_residency1,omitempty"`
	FiscalTaxId1               string  `protobuf:"bytes,3,opt,name=fiscal_tax_id1,json=fiscalTaxId1,proto3" json:"fiscal_tax_id1,omitempty"`
	NationCodeFiscalResidency2 *string `protobuf:"bytes,4,opt,name=nation_code_fiscal_residency2,json=nationCodeFiscalResidency2,proto3,oneof" json:"nation_code_fiscal_residency2,omitempty"`
	FiscalTaxId2               *string `protobuf:"bytes,5,opt,name=fiscal_tax_id2,json=fiscalTaxId2,proto3,oneof" json:"fiscal_tax_id2,omitempty"`
	IsPep                      bool    `protobuf:"varint,6,opt,name=is_pep,json=isPep,proto3" json:"is_pep,omitempty"`
	AccountPurposeCode         string  `protobuf:"bytes,7,opt,name=account_purpose_code,json=accountPurposeCode,proto3" json:"account_purpose_code,omitempty"`
	OriginOfFundsCode          string  `protobuf:"bytes,8,opt,name=origin_of_funds_code,json=originOfFundsCode,proto3" json:"origin_of_funds_code,omitempty"`
	OfficesOwnership           string  `protobuf:"bytes,9,opt,name=offices_ownership,json=officesOwnership,proto3" json:"offices_ownership,omitempty"`
}

func (x *Declarations) Reset() {
	*x = Declarations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Declarations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Declarations) ProtoMessage() {}

func (x *Declarations) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Declarations.ProtoReflect.Descriptor instead.
func (*Declarations) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{17}
}

func (x *Declarations) GetUsResidency() bool {
	if x != nil {
		return x.UsResidency
	}
	return false
}

func (x *Declarations) GetNationCodeFiscalResidency1() string {
	if x != nil {
		return x.NationCodeFiscalResidency1
	}
	return ""
}

func (x *Declarations) GetFiscalTaxId1() string {
	if x != nil {
		return x.FiscalTaxId1
	}
	return ""
}

func (x *Declarations) GetNationCodeFiscalResidency2() string {
	if x != nil && x.NationCodeFiscalResidency2 != nil {
		return *x.NationCodeFiscalResidency2
	}
	return ""
}

func (x *Declarations) GetFiscalTaxId2() string {
	if x != nil && x.FiscalTaxId2 != nil {
		return *x.FiscalTaxId2
	}
	return ""
}

func (x *Declarations) GetIsPep() bool {
	if x != nil {
		return x.IsPep
	}
	return false
}

func (x *Declarations) GetAccountPurposeCode() string {
	if x != nil {
		return x.AccountPurposeCode
	}
	return ""
}

func (x *Declarations) GetOriginOfFundsCode() string {
	if x != nil {
		return x.OriginOfFundsCode
	}
	return ""
}

func (x *Declarations) GetOfficesOwnership() string {
	if x != nil {
		return x.OfficesOwnership
	}
	return ""
}

type IdentityDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeCode          string  `protobuf:"bytes,1,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	Number            string  `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	IssuedBy          string  `protobuf:"bytes,3,opt,name=issued_by,json=issuedBy,proto3" json:"issued_by,omitempty"`
	IssueDate         string  `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ExpiryDate        string  `protobuf:"bytes,5,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	IssueProvinceCode string  `protobuf:"bytes,6,opt,name=issue_province_code,json=issueProvinceCode,proto3" json:"issue_province_code,omitempty"`
	IssuePlace        string  `protobuf:"bytes,7,opt,name=issue_place,json=issuePlace,proto3" json:"issue_place,omitempty"`
	NagStatus         *string `protobuf:"bytes,8,opt,name=nag_status,json=nagStatus,proto3,oneof" json:"nag_status,omitempty"`
}

func (x *IdentityDocument) Reset() {
	*x = IdentityDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityDocument) ProtoMessage() {}

func (x *IdentityDocument) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityDocument.ProtoReflect.Descriptor instead.
func (*IdentityDocument) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{18}
}

func (x *IdentityDocument) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *IdentityDocument) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *IdentityDocument) GetIssuedBy() string {
	if x != nil {
		return x.IssuedBy
	}
	return ""
}

func (x *IdentityDocument) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *IdentityDocument) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *IdentityDocument) GetIssueProvinceCode() string {
	if x != nil {
		return x.IssueProvinceCode
	}
	return ""
}

func (x *IdentityDocument) GetIssuePlace() string {
	if x != nil {
		return x.IssuePlace
	}
	return ""
}

func (x *IdentityDocument) GetNagStatus() string {
	if x != nil && x.NagStatus != nil {
		return *x.NagStatus
	}
	return ""
}

type WelcomeStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=customer.onboarding.ServiceStatus" json:"status,omitempty"`
	Next        string        `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	Message     string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Milestone   string        `protobuf:"bytes,4,opt,name=milestone,proto3" json:"milestone,omitempty"`
	CurrentDate string        `protobuf:"bytes,5,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty"`
}

func (x *WelcomeStatusReply) Reset() {
	*x = WelcomeStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WelcomeStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WelcomeStatusReply) ProtoMessage() {}

func (x *WelcomeStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WelcomeStatusReply.ProtoReflect.Descriptor instead.
func (*WelcomeStatusReply) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{19}
}

func (x *WelcomeStatusReply) GetStatus() ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_UP
}

func (x *WelcomeStatusReply) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *WelcomeStatusReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WelcomeStatusReply) GetMilestone() string {
	if x != nil {
		return x.Milestone
	}
	return ""
}

func (x *WelcomeStatusReply) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

type SetOpenAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType                   AccountType        `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	TaxId                         string             `protobuf:"bytes,2,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	ProcedureId                   string             `protobuf:"bytes,3,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	Surname                       string             `protobuf:"bytes,4,opt,name=surname,proto3" json:"surname,omitempty"`
	Name                          string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Gender                        string             `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Nationality                   string             `protobuf:"bytes,7,opt,name=nationality,proto3" json:"nationality,omitempty"`
	FlagsSkipEc                   string             `protobuf:"bytes,8,opt,name=flags_skip_ec,json=flagsSkipEc,proto3" json:"flags_skip_ec,omitempty"`
	Citizenship                   string             `protobuf:"bytes,9,opt,name=citizenship,proto3" json:"citizenship,omitempty"`
	BirthNation                   string             `protobuf:"bytes,10,opt,name=birth_nation,json=birthNation,proto3" json:"birth_nation,omitempty"`
	BirthPlace                    string             `protobuf:"bytes,11,opt,name=birth_place,json=birthPlace,proto3" json:"birth_place,omitempty"`
	BirthProvince                 string             `protobuf:"bytes,12,opt,name=birth_province,json=birthProvince,proto3" json:"birth_province,omitempty"`
	BirthDate                     string             `protobuf:"bytes,13,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	TelephoneNumber               string             `protobuf:"bytes,14,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	TelephoneNumberPrefix         string             `protobuf:"bytes,15,opt,name=telephone_number_prefix,json=telephoneNumberPrefix,proto3" json:"telephone_number_prefix,omitempty"`
	Email                         string             `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`
	PersonalDocument              *IdentityDocument  `protobuf:"bytes,17,opt,name=personal_document,json=personalDocument,proto3" json:"personal_document,omitempty"`
	Address                       *NormalizedAddress `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	OnlineServicesMembership      int32              `protobuf:"varint,19,opt,name=online_services_membership,json=onlineServicesMembership,proto3" json:"online_services_membership,omitempty"`
	OkeySmart                     bool               `protobuf:"varint,20,opt,name=okey_smart,json=okeySmart,proto3" json:"okey_smart,omitempty"`
	OkeyDevice                    bool               `protobuf:"varint,21,opt,name=okey_device,json=okeyDevice,proto3" json:"okey_device,omitempty"`
	BancocardMembership           int32              `protobuf:"varint,22,opt,name=bancocard_membership,json=bancocardMembership,proto3" json:"bancocard_membership,omitempty"`
	InfoBancocardSms              *bool              `protobuf:"varint,23,opt,name=info_bancocard_sms,json=infoBancocardSms,proto3,oneof" json:"info_bancocard_sms,omitempty"`
	PaymentCircuit                *string            `protobuf:"bytes,24,opt,name=payment_circuit,json=paymentCircuit,proto3,oneof" json:"payment_circuit,omitempty"`
	CustomerCategory              string             `protobuf:"bytes,25,opt,name=customer_category,json=customerCategory,proto3" json:"customer_category,omitempty"`
	ConditionsCategory            string             `protobuf:"bytes,26,opt,name=conditions_category,json=conditionsCategory,proto3" json:"conditions_category,omitempty"`
	IsShrd2                       bool               `protobuf:"varint,27,opt,name=is_shrd2,json=isShrd2,proto3" json:"is_shrd2,omitempty"`
	AccountPurposeCode            string             `protobuf:"bytes,28,opt,name=account_purpose_code,json=accountPurposeCode,proto3" json:"account_purpose_code,omitempty"`
	OriginOfFundsCode             string             `protobuf:"bytes,29,opt,name=origin_of_funds_code,json=originOfFundsCode,proto3" json:"origin_of_funds_code,omitempty"`
	FideuramPersonalDataAgreement bool               `protobuf:"varint,30,opt,name=fideuram_personal_data_agreement,json=fideuramPersonalDataAgreement,proto3" json:"fideuram_personal_data_agreement,omitempty"`
	ThirdPartyDataAgreement       bool               `protobuf:"varint,31,opt,name=third_party_data_agreement,json=thirdPartyDataAgreement,proto3" json:"third_party_data_agreement,omitempty"`
	EducationQualification        string             `protobuf:"bytes,32,opt,name=education_qualification,json=educationQualification,proto3" json:"education_qualification,omitempty"`
	TelecomProvider               *string            `protobuf:"bytes,33,opt,name=telecom_provider,json=telecomProvider,proto3,oneof" json:"telecom_provider,omitempty"`
	PreferredPaymentCircuit       *string            `protobuf:"bytes,34,opt,name=preferred_payment_circuit,json=preferredPaymentCircuit,proto3,oneof" json:"preferred_payment_circuit,omitempty"`
	EnableChequebook              bool               `protobuf:"varint,35,opt,name=enable_chequebook,json=enableChequebook,proto3" json:"enable_chequebook,omitempty"`
	C3Agreement                   bool               `protobuf:"varint,36,opt,name=c3_agreement,json=c3Agreement,proto3" json:"c3_agreement,omitempty"`
	AccountOtherPurposeCode       *string            `protobuf:"bytes,37,opt,name=account_other_purpose_code,json=accountOtherPurposeCode,proto3,oneof" json:"account_other_purpose_code,omitempty"`
	OtherOriginOfFundsCode        *string            `protobuf:"bytes,38,opt,name=other_origin_of_funds_code,json=otherOriginOfFundsCode,proto3,oneof" json:"other_origin_of_funds_code,omitempty"`
}

func (x *SetOpenAccountRequest) Reset() {
	*x = SetOpenAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOpenAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOpenAccountRequest) ProtoMessage() {}

func (x *SetOpenAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOpenAccountRequest.ProtoReflect.Descriptor instead.
func (*SetOpenAccountRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{20}
}

func (x *SetOpenAccountRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *SetOpenAccountRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *SetOpenAccountRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *SetOpenAccountRequest) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *SetOpenAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetOpenAccountRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *SetOpenAccountRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *SetOpenAccountRequest) GetFlagsSkipEc() string {
	if x != nil {
		return x.FlagsSkipEc
	}
	return ""
}

func (x *SetOpenAccountRequest) GetCitizenship() string {
	if x != nil {
		return x.Citizenship
	}
	return ""
}

func (x *SetOpenAccountRequest) GetBirthNation() string {
	if x != nil {
		return x.BirthNation
	}
	return ""
}

func (x *SetOpenAccountRequest) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *SetOpenAccountRequest) GetBirthProvince() string {
	if x != nil {
		return x.BirthProvince
	}
	return ""
}

func (x *SetOpenAccountRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *SetOpenAccountRequest) GetTelephoneNumber() string {
	if x != nil {
		return x.TelephoneNumber
	}
	return ""
}

func (x *SetOpenAccountRequest) GetTelephoneNumberPrefix() string {
	if x != nil {
		return x.TelephoneNumberPrefix
	}
	return ""
}

func (x *SetOpenAccountRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SetOpenAccountRequest) GetPersonalDocument() *IdentityDocument {
	if x != nil {
		return x.PersonalDocument
	}
	return nil
}

func (x *SetOpenAccountRequest) GetAddress() *NormalizedAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SetOpenAccountRequest) GetOnlineServicesMembership() int32 {
	if x != nil {
		return x.OnlineServicesMembership
	}
	return 0
}

func (x *SetOpenAccountRequest) GetOkeySmart() bool {
	if x != nil {
		return x.OkeySmart
	}
	return false
}

func (x *SetOpenAccountRequest) GetOkeyDevice() bool {
	if x != nil {
		return x.OkeyDevice
	}
	return false
}

func (x *SetOpenAccountRequest) GetBancocardMembership() int32 {
	if x != nil {
		return x.BancocardMembership
	}
	return 0
}

func (x *SetOpenAccountRequest) GetInfoBancocardSms() bool {
	if x != nil && x.InfoBancocardSms != nil {
		return *x.InfoBancocardSms
	}
	return false
}

func (x *SetOpenAccountRequest) GetPaymentCircuit() string {
	if x != nil && x.PaymentCircuit != nil {
		return *x.PaymentCircuit
	}
	return ""
}

func (x *SetOpenAccountRequest) GetCustomerCategory() string {
	if x != nil {
		return x.CustomerCategory
	}
	return ""
}

func (x *SetOpenAccountRequest) GetConditionsCategory() string {
	if x != nil {
		return x.ConditionsCategory
	}
	return ""
}

func (x *SetOpenAccountRequest) GetIsShrd2() bool {
	if x != nil {
		return x.IsShrd2
	}
	return false
}

func (x *SetOpenAccountRequest) GetAccountPurposeCode() string {
	if x != nil {
		return x.AccountPurposeCode
	}
	return ""
}

func (x *SetOpenAccountRequest) GetOriginOfFundsCode() string {
	if x != nil {
		return x.OriginOfFundsCode
	}
	return ""
}

func (x *SetOpenAccountRequest) GetFideuramPersonalDataAgreement() bool {
	if x != nil {
		return x.FideuramPersonalDataAgreement
	}
	return false
}

func (x *SetOpenAccountRequest) GetThirdPartyDataAgreement() bool {
	if x != nil {
		return x.ThirdPartyDataAgreement
	}
	return false
}

func (x *SetOpenAccountRequest) GetEducationQualification() string {
	if x != nil {
		return x.EducationQualification
	}
	return ""
}

func (x *SetOpenAccountRequest) GetTelecomProvider() string {
	if x != nil && x.TelecomProvider != nil {
		return *x.TelecomProvider
	}
	return ""
}

func (x *SetOpenAccountRequest) GetPreferredPaymentCircuit() string {
	if x != nil && x.PreferredPaymentCircuit != nil {
		return *x.PreferredPaymentCircuit
	}
	return ""
}

func (x *SetOpenAccountRequest) GetEnableChequebook() bool {
	if x != nil {
		return x.EnableChequebook
	}
	return false
}

func (x *SetOpenAccountRequest) GetC3Agreement() bool {
	if x != nil {
		return x.C3Agreement
	}
	return false
}

func (x *SetOpenAccountRequest) GetAccountOtherPurposeCode() string {
	if x != nil && x.AccountOtherPurposeCode != nil {
		return *x.AccountOtherPurposeCode
	}
	return ""
}

func (x *SetOpenAccountRequest) GetOtherOriginOfFundsCode() string {
	if x != nil && x.OtherOriginOfFundsCode != nil {
		return *x.OtherOriginOfFundsCode
	}
	return ""
}

type SetPersonalDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType                   AccountType        `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	TaxId                         string             `protobuf:"bytes,2,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	ProcedureId                   string             `protobuf:"bytes,3,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	Surname                       string             `protobuf:"bytes,4,opt,name=surname,proto3" json:"surname,omitempty"`
	Name                          string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Gender                        string             `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	BirthDate                     string             `protobuf:"bytes,7,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	BirthPlace                    string             `protobuf:"bytes,8,opt,name=birth_place,json=birthPlace,proto3" json:"birth_place,omitempty"`
	BirthProvince                 string             `protobuf:"bytes,9,opt,name=birth_province,json=birthProvince,proto3" json:"birth_province,omitempty"`
	BirthNation                   string             `protobuf:"bytes,10,opt,name=birth_nation,json=birthNation,proto3" json:"birth_nation,omitempty"`
	Nationality                   string             `protobuf:"bytes,11,opt,name=nationality,proto3" json:"nationality,omitempty"`
	NormalizedAddress             *NormalizedAddress `protobuf:"bytes,12,opt,name=normalized_address,json=normalizedAddress,proto3" json:"normalized_address,omitempty"`
	Profession                    *Profession        `protobuf:"bytes,13,opt,name=profession,proto3" json:"profession,omitempty"`
	Declarations                  *Declarations      `protobuf:"bytes,14,opt,name=declarations,proto3" json:"declarations,omitempty"`
	IdentityDocument              *IdentityDocument  `protobuf:"bytes,15,opt,name=identity_document,json=identityDocument,proto3" json:"identity_document,omitempty"`
	MifidModuleId                 string             `protobuf:"bytes,16,opt,name=mifid_module_id,json=mifidModuleId,proto3" json:"mifid_module_id,omitempty"`
	Email                         string             `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
	TelephoneNumber               string             `protobuf:"bytes,18,opt,name=telephone_number,json=telephoneNumber,proto3" json:"telephone_number,omitempty"`
	TelephoneNumberPrefix         string             `protobuf:"bytes,19,opt,name=telephone_number_prefix,json=telephoneNumberPrefix,proto3" json:"telephone_number_prefix,omitempty"`
	FideuramPersonalDataAgreement bool               `protobuf:"varint,20,opt,name=fideuram_personal_data_agreement,json=fideuramPersonalDataAgreement,proto3" json:"fideuram_personal_data_agreement,omitempty"`
	ThirdPartyDataAgreement       bool               `protobuf:"varint,21,opt,name=third_party_data_agreement,json=thirdPartyDataAgreement,proto3" json:"third_party_data_agreement,omitempty"`
	ContractAddress               *NormalizedAddress `protobuf:"bytes,22,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *SetPersonalDataRequest) Reset() {
	*x = SetPersonalDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPersonalDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalDataRequest) ProtoMessage() {}

func (x *SetPersonalDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalDataRequest.ProtoReflect.Descriptor instead.
func (*SetPersonalDataRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{21}
}

func (x *SetPersonalDataRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *SetPersonalDataRequest) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *SetPersonalDataRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *SetPersonalDataRequest) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *SetPersonalDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetPersonalDataRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *SetPersonalDataRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *SetPersonalDataRequest) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *SetPersonalDataRequest) GetBirthProvince() string {
	if x != nil {
		return x.BirthProvince
	}
	return ""
}

func (x *SetPersonalDataRequest) GetBirthNation() string {
	if x != nil {
		return x.BirthNation
	}
	return ""
}

func (x *SetPersonalDataRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *SetPersonalDataRequest) GetNormalizedAddress() *NormalizedAddress {
	if x != nil {
		return x.NormalizedAddress
	}
	return nil
}

func (x *SetPersonalDataRequest) GetProfession() *Profession {
	if x != nil {
		return x.Profession
	}
	return nil
}

func (x *SetPersonalDataRequest) GetDeclarations() *Declarations {
	if x != nil {
		return x.Declarations
	}
	return nil
}

func (x *SetPersonalDataRequest) GetIdentityDocument() *IdentityDocument {
	if x != nil {
		return x.IdentityDocument
	}
	return nil
}

func (x *SetPersonalDataRequest) GetMifidModuleId() string {
	if x != nil {
		return x.MifidModuleId
	}
	return ""
}

func (x *SetPersonalDataRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SetPersonalDataRequest) GetTelephoneNumber() string {
	if x != nil {
		return x.TelephoneNumber
	}
	return ""
}

func (x *SetPersonalDataRequest) GetTelephoneNumberPrefix() string {
	if x != nil {
		return x.TelephoneNumberPrefix
	}
	return ""
}

func (x *SetPersonalDataRequest) GetFideuramPersonalDataAgreement() bool {
	if x != nil {
		return x.FideuramPersonalDataAgreement
	}
	return false
}

func (x *SetPersonalDataRequest) GetThirdPartyDataAgreement() bool {
	if x != nil {
		return x.ThirdPartyDataAgreement
	}
	return false
}

func (x *SetPersonalDataRequest) GetContractAddress() *NormalizedAddress {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

type GetEntireDomainInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp                  uint64                        `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Attivita                   []*Attivita                   `protobuf:"bytes,2,rep,name=attivita,proto3" json:"attivita,omitempty"`
	Ateco                      []*Ateco                      `protobuf:"bytes,3,rep,name=ateco,proto3" json:"ateco,omitempty"`
	Sae                        []*Sae                        `protobuf:"bytes,4,rep,name=sae,proto3" json:"sae,omitempty"`
	Toponimo                   []*Toponimo                   `protobuf:"bytes,5,rep,name=toponimo,proto3" json:"toponimo,omitempty"`
	Province                   []*Province                   `protobuf:"bytes,6,rep,name=province,proto3" json:"province,omitempty"`
	Localita                   []*Localita                   `protobuf:"bytes,7,rep,name=localita,proto3" json:"localita,omitempty"`
	Nazioni                    []*Nazioni                    `protobuf:"bytes,8,rep,name=nazioni,proto3" json:"nazioni,omitempty"`
	Settori                    []*Settori                    `protobuf:"bytes,9,rep,name=settori,proto3" json:"settori,omitempty"`
	RelazioneAffari            []*Relazioneaffari            `protobuf:"bytes,10,rep,name=relazioneAffari,proto3" json:"relazioneAffari,omitempty"`
	Professioni                []*Professioni                `protobuf:"bytes,11,rep,name=professioni,proto3" json:"professioni,omitempty"`
	Segmento                   []*Segmento                   `protobuf:"bytes,12,rep,name=segmento,proto3" json:"segmento,omitempty"`
	OrigineFondi               []*Originefondi               `protobuf:"bytes,13,rep,name=origineFondi,proto3" json:"origineFondi,omitempty"`
	TitoloDiStudio             []*Titolodistudio             `protobuf:"bytes,14,rep,name=titoloDiStudio,proto3" json:"titoloDiStudio,omitempty"`
	AnaDoc                     []*Anadoc                     `protobuf:"bytes,15,rep,name=anaDoc,proto3" json:"anaDoc,omitempty"`
	Titolarita                 []*Titolarita                 `protobuf:"bytes,16,rep,name=titolarita,proto3" json:"titolarita,omitempty"`
	ScopoRapporto              []*Scoporapporto              `protobuf:"bytes,17,rep,name=scopoRapporto,proto3" json:"scopoRapporto,omitempty"`
	Periodicita                []*Periodicita                `protobuf:"bytes,18,rep,name=periodicita,proto3" json:"periodicita,omitempty"`
	OperatoreTelefonico        []*Operatoretelefonico        `protobuf:"bytes,19,rep,name=operatoreTelefonico,proto3" json:"operatoreTelefonico,omitempty"`
	NaturaRapporto             []*Naturarapporto             `protobuf:"bytes,20,rep,name=naturaRapporto,proto3" json:"naturaRapporto,omitempty"`
	Formato                    []*Formato                    `protobuf:"bytes,21,rep,name=formato,proto3" json:"formato,omitempty"`
	CategoriaCondizioni        []*Categoriacondizioni        `protobuf:"bytes,22,rep,name=categoriaCondizioni,proto3" json:"categoriaCondizioni,omitempty"`
	CategoriaCliente           []*Categoriacliente           `protobuf:"bytes,23,rep,name=categoriaCliente,proto3" json:"categoriaCliente,omitempty"`
	RapportoPb                 []*Rapportopb                 `protobuf:"bytes,24,rep,name=rapportoPb,proto3" json:"rapportoPb,omitempty"`
	MezzoConsegna              []*Mezzoconsegna              `protobuf:"bytes,25,rep,name=mezzoConsegna,proto3" json:"mezzoConsegna,omitempty"`
	AdeguataVerifica           []*Adeguataverifica           `protobuf:"bytes,26,rep,name=adeguataVerifica,proto3" json:"adeguataVerifica,omitempty"`
	Filiali                    []*Filiali                    `protobuf:"bytes,27,rep,name=filiali,proto3" json:"filiali,omitempty"`
	ModalitaCo                 []*Modalitaco                 `protobuf:"bytes,28,rep,name=modalitaCo,proto3" json:"modalitaCo,omitempty"`
	Sesso                      []*Sesso                      `protobuf:"bytes,29,rep,name=sesso,proto3" json:"sesso,omitempty"`
	CoppiaDomandaRispostaMifid []*Coppiadomandarispostamifid `protobuf:"bytes,30,rep,name=coppiaDomandaRispostaMifid,proto3" json:"coppiaDomandaRispostaMifid,omitempty"`
	CoppiaDomandaRispostaQavPb []*Coppiadomandarispostaqavpb `protobuf:"bytes,31,rep,name=coppiaDomandaRispostaQavPb,proto3" json:"coppiaDomandaRispostaQavPb,omitempty"`
	ClassePatrimonio           []*Classepatrimonio           `protobuf:"bytes,32,rep,name=classePatrimonio,proto3" json:"classePatrimonio,omitempty"`
	ModalitaPagamento          []*Modalitapagamento          `protobuf:"bytes,33,rep,name=modalitaPagamento,proto3" json:"modalitaPagamento,omitempty"`
	LivelloAgevolazione        []*Livelloagevolazione        `protobuf:"bytes,34,rep,name=livelloAgevolazione,proto3" json:"livelloAgevolazione,omitempty"`
	LivelloAgevolazioneTrim    []*Livelloagevolazionetrim    `protobuf:"bytes,35,rep,name=livelloAgevolazioneTrim,proto3" json:"livelloAgevolazioneTrim,omitempty"`
	ListaBanche                []*Listabanche                `protobuf:"bytes,36,rep,name=listaBanche,proto3" json:"listaBanche,omitempty"`
	IniziativeCommerciali      []*Iniziativecommerciali      `protobuf:"bytes,37,rep,name=iniziativeCommerciali,proto3" json:"iniziativeCommerciali,omitempty"`
	ListaIsin                  []*Listaisin                  `protobuf:"bytes,38,rep,name=listaIsin,proto3" json:"listaIsin,omitempty"`
	RapportoCointestatari      []*Rapportocointestatari      `protobuf:"bytes,39,rep,name=rapportoCointestatari,proto3" json:"rapportoCointestatari,omitempty"`
	OrdiniAddebito             []*Ordiniaddebito             `protobuf:"bytes,40,rep,name=ordiniAddebito,proto3" json:"ordiniAddebito,omitempty"`
	PrefissiInternazionali     []*Prefissiinternazionali     `protobuf:"bytes,41,rep,name=prefissiInternazionali,proto3" json:"prefissiInternazionali,omitempty"`
	CircuitiPagamento          []*Circuitipagamento          `protobuf:"bytes,42,rep,name=circuitiPagamento,proto3" json:"circuitiPagamento,omitempty"`
}

func (x *GetEntireDomainInfoResponse) Reset() {
	*x = GetEntireDomainInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntireDomainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntireDomainInfoResponse) ProtoMessage() {}

func (x *GetEntireDomainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntireDomainInfoResponse.ProtoReflect.Descriptor instead.
func (*GetEntireDomainInfoResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{22}
}

func (x *GetEntireDomainInfoResponse) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetEntireDomainInfoResponse) GetAttivita() []*Attivita {
	if x != nil {
		return x.Attivita
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetAteco() []*Ateco {
	if x != nil {
		return x.Ateco
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetSae() []*Sae {
	if x != nil {
		return x.Sae
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetToponimo() []*Toponimo {
	if x != nil {
		return x.Toponimo
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetProvince() []*Province {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetLocalita() []*Localita {
	if x != nil {
		return x.Localita
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetNazioni() []*Nazioni {
	if x != nil {
		return x.Nazioni
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetSettori() []*Settori {
	if x != nil {
		return x.Settori
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetRelazioneAffari() []*Relazioneaffari {
	if x != nil {
		return x.RelazioneAffari
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetProfessioni() []*Professioni {
	if x != nil {
		return x.Professioni
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetSegmento() []*Segmento {
	if x != nil {
		return x.Segmento
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetOrigineFondi() []*Originefondi {
	if x != nil {
		return x.OrigineFondi
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetTitoloDiStudio() []*Titolodistudio {
	if x != nil {
		return x.TitoloDiStudio
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetAnaDoc() []*Anadoc {
	if x != nil {
		return x.AnaDoc
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetTitolarita() []*Titolarita {
	if x != nil {
		return x.Titolarita
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetScopoRapporto() []*Scoporapporto {
	if x != nil {
		return x.ScopoRapporto
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetPeriodicita() []*Periodicita {
	if x != nil {
		return x.Periodicita
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetOperatoreTelefonico() []*Operatoretelefonico {
	if x != nil {
		return x.OperatoreTelefonico
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetNaturaRapporto() []*Naturarapporto {
	if x != nil {
		return x.NaturaRapporto
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetFormato() []*Formato {
	if x != nil {
		return x.Formato
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetCategoriaCondizioni() []*Categoriacondizioni {
	if x != nil {
		return x.CategoriaCondizioni
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetCategoriaCliente() []*Categoriacliente {
	if x != nil {
		return x.CategoriaCliente
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetRapportoPb() []*Rapportopb {
	if x != nil {
		return x.RapportoPb
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetMezzoConsegna() []*Mezzoconsegna {
	if x != nil {
		return x.MezzoConsegna
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetAdeguataVerifica() []*Adeguataverifica {
	if x != nil {
		return x.AdeguataVerifica
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetFiliali() []*Filiali {
	if x != nil {
		return x.Filiali
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetModalitaCo() []*Modalitaco {
	if x != nil {
		return x.ModalitaCo
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetSesso() []*Sesso {
	if x != nil {
		return x.Sesso
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetCoppiaDomandaRispostaMifid() []*Coppiadomandarispostamifid {
	if x != nil {
		return x.CoppiaDomandaRispostaMifid
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetCoppiaDomandaRispostaQavPb() []*Coppiadomandarispostaqavpb {
	if x != nil {
		return x.CoppiaDomandaRispostaQavPb
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetClassePatrimonio() []*Classepatrimonio {
	if x != nil {
		return x.ClassePatrimonio
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetModalitaPagamento() []*Modalitapagamento {
	if x != nil {
		return x.ModalitaPagamento
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetLivelloAgevolazione() []*Livelloagevolazione {
	if x != nil {
		return x.LivelloAgevolazione
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetLivelloAgevolazioneTrim() []*Livelloagevolazionetrim {
	if x != nil {
		return x.LivelloAgevolazioneTrim
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetListaBanche() []*Listabanche {
	if x != nil {
		return x.ListaBanche
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetIniziativeCommerciali() []*Iniziativecommerciali {
	if x != nil {
		return x.IniziativeCommerciali
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetListaIsin() []*Listaisin {
	if x != nil {
		return x.ListaIsin
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetRapportoCointestatari() []*Rapportocointestatari {
	if x != nil {
		return x.RapportoCointestatari
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetOrdiniAddebito() []*Ordiniaddebito {
	if x != nil {
		return x.OrdiniAddebito
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetPrefissiInternazionali() []*Prefissiinternazionali {
	if x != nil {
		return x.PrefissiInternazionali
	}
	return nil
}

func (x *GetEntireDomainInfoResponse) GetCircuitiPagamento() []*Circuitipagamento {
	if x != nil {
		return x.CircuitiPagamento
	}
	return nil
}

type CreateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string           `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *structpb.Struct `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateFlowRequest) Reset() {
	*x = CreateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowRequest) ProtoMessage() {}

func (x *CreateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{23}
}

func (x *CreateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateFlowRequest) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CheckFlowExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *CheckFlowExistsRequest) Reset() {
	*x = CheckFlowExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFlowExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFlowExistsRequest) ProtoMessage() {}

func (x *CheckFlowExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFlowExistsRequest.ProtoReflect.Descriptor instead.
func (*CheckFlowExistsRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{24}
}

func (x *CheckFlowExistsRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type GetFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetFlowRequest) Reset() {
	*x = GetFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowRequest) ProtoMessage() {}

func (x *GetFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowRequest.ProtoReflect.Descriptor instead.
func (*GetFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{25}
}

func (x *GetFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type GetFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateFlow               *structpb.Struct `protobuf:"bytes,1,opt,name=create_flow,json=createFlow,proto3,oneof" json:"create_flow,omitempty"`
	CreateProcedure          *structpb.Struct `protobuf:"bytes,2,opt,name=create_procedure,json=createProcedure,proto3,oneof" json:"create_procedure,omitempty"`
	HomeAddress              *structpb.Struct `protobuf:"bytes,3,opt,name=home_address,json=homeAddress,proto3,oneof" json:"home_address,omitempty"`
	MailAddress              *structpb.Struct `protobuf:"bytes,4,opt,name=mail_address,json=mailAddress,proto3,oneof" json:"mail_address,omitempty"`
	SaeAteco                 *structpb.Struct `protobuf:"bytes,5,opt,name=sae_ateco,json=saeAteco,proto3,oneof" json:"sae_ateco,omitempty"`
	PepUsResidency           *structpb.Struct `protobuf:"bytes,6,opt,name=pep_us_residency,json=pepUsResidency,proto3,oneof" json:"pep_us_residency,omitempty"`
	Mifid                    *structpb.Struct `protobuf:"bytes,7,opt,name=mifid,proto3,oneof" json:"mifid,omitempty"`
	BancoCardDetails         *structpb.Struct `protobuf:"bytes,8,opt,name=banco_card_details,json=bancoCardDetails,proto3,oneof" json:"banco_card_details,omitempty"`
	PersonalData             *structpb.Struct `protobuf:"bytes,9,opt,name=personal_data,json=personalData,proto3,oneof" json:"personal_data,omitempty"`
	CustomerInfo             *structpb.Struct `protobuf:"bytes,10,opt,name=customer_info,json=customerInfo,proto3,oneof" json:"customer_info,omitempty"`
	CustomerResidency        *structpb.Struct `protobuf:"bytes,11,opt,name=customer_residency,json=customerResidency,proto3,oneof" json:"customer_residency,omitempty"`
	PoliticallyExposed       *structpb.Struct `protobuf:"bytes,12,opt,name=politically_exposed,json=politicallyExposed,proto3,oneof" json:"politically_exposed,omitempty"`
	PepUsResidencyConditions *structpb.Struct `protobuf:"bytes,13,opt,name=pep_us_residency_conditions,json=pepUsResidencyConditions,proto3,oneof" json:"pep_us_residency_conditions,omitempty"`
	ContractDetails          *structpb.Struct `protobuf:"bytes,14,opt,name=contract_details,json=contractDetails,proto3,oneof" json:"contract_details,omitempty"`
	MifidQuestionAnswers     *structpb.Struct `protobuf:"bytes,15,opt,name=mifid_question_answers,json=mifidQuestionAnswers,proto3,oneof" json:"mifid_question_answers,omitempty"`
	ContactsCertified        bool             `protobuf:"varint,16,opt,name=contacts_certified,json=contactsCertified,proto3" json:"contacts_certified,omitempty"`
	HasIdentityDocument      bool             `protobuf:"varint,17,opt,name=has_identity_document,json=hasIdentityDocument,proto3" json:"has_identity_document,omitempty"`
}

func (x *GetFlowResponse) Reset() {
	*x = GetFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowResponse) ProtoMessage() {}

func (x *GetFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowResponse.ProtoReflect.Descriptor instead.
func (*GetFlowResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{26}
}

func (x *GetFlowResponse) GetCreateFlow() *structpb.Struct {
	if x != nil {
		return x.CreateFlow
	}
	return nil
}

func (x *GetFlowResponse) GetCreateProcedure() *structpb.Struct {
	if x != nil {
		return x.CreateProcedure
	}
	return nil
}

func (x *GetFlowResponse) GetHomeAddress() *structpb.Struct {
	if x != nil {
		return x.HomeAddress
	}
	return nil
}

func (x *GetFlowResponse) GetMailAddress() *structpb.Struct {
	if x != nil {
		return x.MailAddress
	}
	return nil
}

func (x *GetFlowResponse) GetSaeAteco() *structpb.Struct {
	if x != nil {
		return x.SaeAteco
	}
	return nil
}

func (x *GetFlowResponse) GetPepUsResidency() *structpb.Struct {
	if x != nil {
		return x.PepUsResidency
	}
	return nil
}

func (x *GetFlowResponse) GetMifid() *structpb.Struct {
	if x != nil {
		return x.Mifid
	}
	return nil
}

func (x *GetFlowResponse) GetBancoCardDetails() *structpb.Struct {
	if x != nil {
		return x.BancoCardDetails
	}
	return nil
}

func (x *GetFlowResponse) GetPersonalData() *structpb.Struct {
	if x != nil {
		return x.PersonalData
	}
	return nil
}

func (x *GetFlowResponse) GetCustomerInfo() *structpb.Struct {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

func (x *GetFlowResponse) GetCustomerResidency() *structpb.Struct {
	if x != nil {
		return x.CustomerResidency
	}
	return nil
}

func (x *GetFlowResponse) GetPoliticallyExposed() *structpb.Struct {
	if x != nil {
		return x.PoliticallyExposed
	}
	return nil
}

func (x *GetFlowResponse) GetPepUsResidencyConditions() *structpb.Struct {
	if x != nil {
		return x.PepUsResidencyConditions
	}
	return nil
}

func (x *GetFlowResponse) GetContractDetails() *structpb.Struct {
	if x != nil {
		return x.ContractDetails
	}
	return nil
}

func (x *GetFlowResponse) GetMifidQuestionAnswers() *structpb.Struct {
	if x != nil {
		return x.MifidQuestionAnswers
	}
	return nil
}

func (x *GetFlowResponse) GetContactsCertified() bool {
	if x != nil {
		return x.ContactsCertified
	}
	return false
}

func (x *GetFlowResponse) GetHasIdentityDocument() bool {
	if x != nil {
		return x.HasIdentityDocument
	}
	return false
}

type GetIdentityDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetIdentityDocumentRequest) Reset() {
	*x = GetIdentityDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentityDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityDocumentRequest) ProtoMessage() {}

func (x *GetIdentityDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetIdentityDocumentRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{27}
}

func (x *GetIdentityDocumentRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type GetIdentityDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityDocument *structpb.Struct `protobuf:"bytes,1,opt,name=identity_document,json=identityDocument,proto3" json:"identity_document,omitempty"`
}

func (x *GetIdentityDocumentResponse) Reset() {
	*x = GetIdentityDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentityDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityDocumentResponse) ProtoMessage() {}

func (x *GetIdentityDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetIdentityDocumentResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{28}
}

func (x *GetIdentityDocumentResponse) GetIdentityDocument() *structpb.Struct {
	if x != nil {
		return x.IdentityDocument
	}
	return nil
}

type CreateProcedureAndUpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string                  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *CreateProcedureRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateProcedureAndUpdateFlowRequest) Reset() {
	*x = CreateProcedureAndUpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcedureAndUpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcedureAndUpdateFlowRequest) ProtoMessage() {}

func (x *CreateProcedureAndUpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcedureAndUpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*CreateProcedureAndUpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{29}
}

func (x *CreateProcedureAndUpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateProcedureAndUpdateFlowRequest) GetPayload() *CreateProcedureRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type NormalizeAddressAndUpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string                   `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *NormalizeAddressRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NormalizeAddressAndUpdateFlowRequest) Reset() {
	*x = NormalizeAddressAndUpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizeAddressAndUpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeAddressAndUpdateFlowRequest) ProtoMessage() {}

func (x *NormalizeAddressAndUpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeAddressAndUpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*NormalizeAddressAndUpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{30}
}

func (x *NormalizeAddressAndUpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *NormalizeAddressAndUpdateFlowRequest) GetPayload() *NormalizeAddressRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UpdateImageAndFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string              `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *UpdateImageRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateImageAndFlowRequest) Reset() {
	*x = UpdateImageAndFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageAndFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageAndFlowRequest) ProtoMessage() {}

func (x *UpdateImageAndFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageAndFlowRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageAndFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateImageAndFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UpdateImageAndFlowRequest) GetPayload() *UpdateImageRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SaveMifidAndUpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string            `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *SaveMifidRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SaveMifidAndUpdateFlowRequest) Reset() {
	*x = SaveMifidAndUpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMifidAndUpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMifidAndUpdateFlowRequest) ProtoMessage() {}

func (x *SaveMifidAndUpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMifidAndUpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*SaveMifidAndUpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{32}
}

func (x *SaveMifidAndUpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SaveMifidAndUpdateFlowRequest) GetPayload() *SaveMifidRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SetPersonalDataAndUpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string                  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *SetPersonalDataRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SetPersonalDataAndUpdateFlowRequest) Reset() {
	*x = SetPersonalDataAndUpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPersonalDataAndUpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalDataAndUpdateFlowRequest) ProtoMessage() {}

func (x *SetPersonalDataAndUpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalDataAndUpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*SetPersonalDataAndUpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{33}
}

func (x *SetPersonalDataAndUpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SetPersonalDataAndUpdateFlowRequest) GetPayload() *SetPersonalDataRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type VerifyOtpCodeAndUpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string                `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *VerifyOtpCodeRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *VerifyOtpCodeAndUpdateFlowRequest) Reset() {
	*x = VerifyOtpCodeAndUpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtpCodeAndUpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtpCodeAndUpdateFlowRequest) ProtoMessage() {}

func (x *VerifyOtpCodeAndUpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtpCodeAndUpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*VerifyOtpCodeAndUpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{34}
}

func (x *VerifyOtpCodeAndUpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VerifyOtpCodeAndUpdateFlowRequest) GetPayload() *VerifyOtpCodeRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SetOpenAccountAndUpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *SetOpenAccountRequest `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SetOpenAccountAndUpdateFlowRequest) Reset() {
	*x = SetOpenAccountAndUpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOpenAccountAndUpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOpenAccountAndUpdateFlowRequest) ProtoMessage() {}

func (x *SetOpenAccountAndUpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOpenAccountAndUpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*SetOpenAccountAndUpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{35}
}

func (x *SetOpenAccountAndUpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SetOpenAccountAndUpdateFlowRequest) GetPayload() *SetOpenAccountRequest {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UpdateFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string           `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Payload  *structpb.Struct `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateFlowRequest) Reset() {
	*x = UpdateFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowRequest) ProtoMessage() {}

func (x *UpdateFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UpdateFlowRequest) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeleteFlowRequest) Reset() {
	*x = DeleteFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowRequest) ProtoMessage() {}

func (x *DeleteFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlowRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteFlowRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type CheckAdditionalMifidQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType         AccountType            `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=customer.onboarding.AccountType" json:"account_type,omitempty"`
	Customer            *MifidCustomer         `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	QuestionsAndAnswers []*QuestionsAndAnswers `protobuf:"bytes,3,rep,name=questions_and_answers,json=questionsAndAnswers,proto3" json:"questions_and_answers,omitempty"`
}

func (x *CheckAdditionalMifidQuestionsRequest) Reset() {
	*x = CheckAdditionalMifidQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAdditionalMifidQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAdditionalMifidQuestionsRequest) ProtoMessage() {}

func (x *CheckAdditionalMifidQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAdditionalMifidQuestionsRequest.ProtoReflect.Descriptor instead.
func (*CheckAdditionalMifidQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{38}
}

func (x *CheckAdditionalMifidQuestionsRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_AT_UNSPECIFIED
}

func (x *CheckAdditionalMifidQuestionsRequest) GetCustomer() *MifidCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CheckAdditionalMifidQuestionsRequest) GetQuestionsAndAnswers() []*QuestionsAndAnswers {
	if x != nil {
		return x.QuestionsAndAnswers
	}
	return nil
}

type MifidCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gender      string `protobuf:"bytes,1,opt,name=gender,proto3" json:"gender,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Surname     string `protobuf:"bytes,3,opt,name=surname,proto3" json:"surname,omitempty"`
	TaxId       string `protobuf:"bytes,4,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	ProcedureId string `protobuf:"bytes,5,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	BirthDate   string `protobuf:"bytes,6,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
}

func (x *MifidCustomer) Reset() {
	*x = MifidCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MifidCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MifidCustomer) ProtoMessage() {}

func (x *MifidCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MifidCustomer.ProtoReflect.Descriptor instead.
func (*MifidCustomer) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{39}
}

func (x *MifidCustomer) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *MifidCustomer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MifidCustomer) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *MifidCustomer) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *MifidCustomer) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *MifidCustomer) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

type CheckAdditionalMifidQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowAdditionalMifidQuestions bool `protobuf:"varint,1,opt,name=show_additional_mifid_questions,json=showAdditionalMifidQuestions,proto3" json:"show_additional_mifid_questions,omitempty"`
}

func (x *CheckAdditionalMifidQuestionsResponse) Reset() {
	*x = CheckAdditionalMifidQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAdditionalMifidQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAdditionalMifidQuestionsResponse) ProtoMessage() {}

func (x *CheckAdditionalMifidQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAdditionalMifidQuestionsResponse.ProtoReflect.Descriptor instead.
func (*CheckAdditionalMifidQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{40}
}

func (x *CheckAdditionalMifidQuestionsResponse) GetShowAdditionalMifidQuestions() bool {
	if x != nil {
		return x.ShowAdditionalMifidQuestions
	}
	return false
}

type Attivita struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	DominioNag  bool   `protobuf:"varint,4,opt,name=dominioNag,proto3" json:"dominioNag,omitempty"`
}

func (x *Attivita) Reset() {
	*x = Attivita{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attivita) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attivita) ProtoMessage() {}

func (x *Attivita) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attivita.ProtoReflect.Descriptor instead.
func (*Attivita) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{41}
}

func (x *Attivita) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Attivita) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Attivita) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Attivita) GetDominioNag() bool {
	if x != nil {
		return x.DominioNag
	}
	return false
}

type Ateco struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice             string   `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione        string   `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DescrizioneRidotta string   `protobuf:"bytes,3,opt,name=descrizioneRidotta,proto3" json:"descrizioneRidotta,omitempty"`
	SegmentoList       []string `protobuf:"bytes,4,rep,name=segmentoList,proto3" json:"segmentoList,omitempty"`
}

func (x *Ateco) Reset() {
	*x = Ateco{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ateco) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ateco) ProtoMessage() {}

func (x *Ateco) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ateco.ProtoReflect.Descriptor instead.
func (*Ateco) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{42}
}

func (x *Ateco) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Ateco) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Ateco) GetDescrizioneRidotta() string {
	if x != nil {
		return x.DescrizioneRidotta
	}
	return ""
}

func (x *Ateco) GetSegmentoList() []string {
	if x != nil {
		return x.SegmentoList
	}
	return nil
}

type Sae struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice       string   `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione  string   `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	SegmentoList []string `protobuf:"bytes,3,rep,name=segmentoList,proto3" json:"segmentoList,omitempty"`
	AtecoList    []string `protobuf:"bytes,4,rep,name=atecoList,proto3" json:"atecoList,omitempty"`
}

func (x *Sae) Reset() {
	*x = Sae{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sae) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sae) ProtoMessage() {}

func (x *Sae) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sae.ProtoReflect.Descriptor instead.
func (*Sae) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{43}
}

func (x *Sae) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Sae) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Sae) GetSegmentoList() []string {
	if x != nil {
		return x.SegmentoList
	}
	return nil
}

func (x *Sae) GetAtecoList() []string {
	if x != nil {
		return x.AtecoList
	}
	return nil
}

type Toponimo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
}

func (x *Toponimo) Reset() {
	*x = Toponimo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toponimo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toponimo) ProtoMessage() {}

func (x *Toponimo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toponimo.ProtoReflect.Descriptor instead.
func (*Toponimo) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{44}
}

func (x *Toponimo) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Toponimo) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

type Province struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DominioNag  bool   `protobuf:"varint,3,opt,name=dominioNag,proto3" json:"dominioNag,omitempty"`
}

func (x *Province) Reset() {
	*x = Province{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Province) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Province) ProtoMessage() {}

func (x *Province) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Province.ProtoReflect.Descriptor instead.
func (*Province) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{45}
}

func (x *Province) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Province) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Province) GetDominioNag() bool {
	if x != nil {
		return x.DominioNag
	}
	return false
}

type Localita struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Prov       string `protobuf:"bytes,2,opt,name=prov,proto3" json:"prov,omitempty"`
	Localita   string `protobuf:"bytes,3,opt,name=localita,proto3" json:"localita,omitempty"`
	DataInizio string `protobuf:"bytes,4,opt,name=dataInizio,proto3" json:"dataInizio,omitempty"`
	DataFine   string `protobuf:"bytes,5,opt,name=dataFine,proto3" json:"dataFine,omitempty"`
}

func (x *Localita) Reset() {
	*x = Localita{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Localita) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Localita) ProtoMessage() {}

func (x *Localita) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Localita.ProtoReflect.Descriptor instead.
func (*Localita) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{46}
}

func (x *Localita) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Localita) GetProv() string {
	if x != nil {
		return x.Prov
	}
	return ""
}

func (x *Localita) GetLocalita() string {
	if x != nil {
		return x.Localita
	}
	return ""
}

func (x *Localita) GetDataInizio() string {
	if x != nil {
		return x.DataInizio
	}
	return ""
}

func (x *Localita) GetDataFine() string {
	if x != nil {
		return x.DataFine
	}
	return ""
}

type Nazioni struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice             string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione        string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault        uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	FlagNazioneNascita uint32 `protobuf:"varint,4,opt,name=flagNazioneNascita,proto3" json:"flagNazioneNascita,omitempty"`
	IsSoloNascita      string `protobuf:"bytes,5,opt,name=isSoloNascita,proto3" json:"isSoloNascita,omitempty"`
	DataInizio         string `protobuf:"bytes,6,opt,name=dataInizio,proto3" json:"dataInizio,omitempty"`
	DataFine           string `protobuf:"bytes,7,opt,name=dataFine,proto3" json:"dataFine,omitempty"`
}

func (x *Nazioni) Reset() {
	*x = Nazioni{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nazioni) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nazioni) ProtoMessage() {}

func (x *Nazioni) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nazioni.ProtoReflect.Descriptor instead.
func (*Nazioni) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{47}
}

func (x *Nazioni) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Nazioni) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Nazioni) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Nazioni) GetFlagNazioneNascita() uint32 {
	if x != nil {
		return x.FlagNazioneNascita
	}
	return 0
}

func (x *Nazioni) GetIsSoloNascita() string {
	if x != nil {
		return x.IsSoloNascita
	}
	return ""
}

func (x *Nazioni) GetDataInizio() string {
	if x != nil {
		return x.DataInizio
	}
	return ""
}

func (x *Nazioni) GetDataFine() string {
	if x != nil {
		return x.DataFine
	}
	return ""
}

type Settori struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	Codvig      string `protobuf:"bytes,3,opt,name=codvig,proto3" json:"codvig,omitempty"`
	FlagFfi     string `protobuf:"bytes,4,opt,name=flagFfi,proto3" json:"flagFfi,omitempty"`
	FlagDefault uint32 `protobuf:"varint,5,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Settori) Reset() {
	*x = Settori{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settori) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settori) ProtoMessage() {}

func (x *Settori) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settori.ProtoReflect.Descriptor instead.
func (*Settori) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{48}
}

func (x *Settori) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Settori) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Settori) GetCodvig() string {
	if x != nil {
		return x.Codvig
	}
	return ""
}

func (x *Settori) GetFlagFfi() string {
	if x != nil {
		return x.FlagFfi
	}
	return ""
}

func (x *Settori) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Relazioneaffari struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	DominioNag  bool   `protobuf:"varint,4,opt,name=dominioNag,proto3" json:"dominioNag,omitempty"`
}

func (x *Relazioneaffari) Reset() {
	*x = Relazioneaffari{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relazioneaffari) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relazioneaffari) ProtoMessage() {}

func (x *Relazioneaffari) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relazioneaffari.ProtoReflect.Descriptor instead.
func (*Relazioneaffari) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{49}
}

func (x *Relazioneaffari) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Relazioneaffari) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Relazioneaffari) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Relazioneaffari) GetDominioNag() bool {
	if x != nil {
		return x.DominioNag
	}
	return false
}

type Professioni struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	Ordinamento uint32 `protobuf:"varint,4,opt,name=ordinamento,proto3" json:"ordinamento,omitempty"`
}

func (x *Professioni) Reset() {
	*x = Professioni{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Professioni) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Professioni) ProtoMessage() {}

func (x *Professioni) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Professioni.ProtoReflect.Descriptor instead.
func (*Professioni) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{50}
}

func (x *Professioni) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Professioni) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Professioni) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Professioni) GetOrdinamento() uint32 {
	if x != nil {
		return x.Ordinamento
	}
	return 0
}

type Segmento struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	Ordinamento uint32 `protobuf:"varint,4,opt,name=ordinamento,proto3" json:"ordinamento,omitempty"`
}

func (x *Segmento) Reset() {
	*x = Segmento{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segmento) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segmento) ProtoMessage() {}

func (x *Segmento) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segmento.ProtoReflect.Descriptor instead.
func (*Segmento) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{51}
}

func (x *Segmento) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Segmento) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Segmento) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Segmento) GetOrdinamento() uint32 {
	if x != nil {
		return x.Ordinamento
	}
	return 0
}

type Originefondi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice            string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione       string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DescrizioneEstesa string `protobuf:"bytes,3,opt,name=descrizioneEstesa,proto3" json:"descrizioneEstesa,omitempty"`
	FlagDefault       uint32 `protobuf:"varint,4,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	DominioNag        bool   `protobuf:"varint,5,opt,name=dominioNag,proto3" json:"dominioNag,omitempty"`
}

func (x *Originefondi) Reset() {
	*x = Originefondi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Originefondi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Originefondi) ProtoMessage() {}

func (x *Originefondi) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Originefondi.ProtoReflect.Descriptor instead.
func (*Originefondi) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{52}
}

func (x *Originefondi) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Originefondi) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Originefondi) GetDescrizioneEstesa() string {
	if x != nil {
		return x.DescrizioneEstesa
	}
	return ""
}

func (x *Originefondi) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Originefondi) GetDominioNag() bool {
	if x != nil {
		return x.DominioNag
	}
	return false
}

type Titolodistudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	CodicePdf   string `protobuf:"bytes,4,opt,name=codicePdf,proto3" json:"codicePdf,omitempty"`
}

func (x *Titolodistudio) Reset() {
	*x = Titolodistudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Titolodistudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Titolodistudio) ProtoMessage() {}

func (x *Titolodistudio) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Titolodistudio.ProtoReflect.Descriptor instead.
func (*Titolodistudio) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{53}
}

func (x *Titolodistudio) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Titolodistudio) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Titolodistudio) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Titolodistudio) GetCodicePdf() string {
	if x != nil {
		return x.CodicePdf
	}
	return ""
}

type Anadoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Descrizione   string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	EnteEmittente string `protobuf:"bytes,3,opt,name=enteEmittente,proto3" json:"enteEmittente,omitempty"`
	Allegati      uint32 `protobuf:"varint,4,opt,name=allegati,proto3" json:"allegati,omitempty"`
	FlagDefault   uint32 `protobuf:"varint,5,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	DominioNag    bool   `protobuf:"varint,6,opt,name=dominioNag,proto3" json:"dominioNag,omitempty"`
}

func (x *Anadoc) Reset() {
	*x = Anadoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anadoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anadoc) ProtoMessage() {}

func (x *Anadoc) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anadoc.ProtoReflect.Descriptor instead.
func (*Anadoc) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{54}
}

func (x *Anadoc) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Anadoc) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Anadoc) GetEnteEmittente() string {
	if x != nil {
		return x.EnteEmittente
	}
	return ""
}

func (x *Anadoc) GetAllegati() uint32 {
	if x != nil {
		return x.Allegati
	}
	return 0
}

func (x *Anadoc) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Anadoc) GetDominioNag() bool {
	if x != nil {
		return x.DominioNag
	}
	return false
}

type Titolarita struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Titolarita) Reset() {
	*x = Titolarita{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Titolarita) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Titolarita) ProtoMessage() {}

func (x *Titolarita) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Titolarita.ProtoReflect.Descriptor instead.
func (*Titolarita) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{55}
}

func (x *Titolarita) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Titolarita) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Titolarita) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Scoporapporto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice             string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione        string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault        uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	TrasferimentoQuote bool   `protobuf:"varint,4,opt,name=trasferimentoQuote,proto3" json:"trasferimentoQuote,omitempty"`
}

func (x *Scoporapporto) Reset() {
	*x = Scoporapporto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scoporapporto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoporapporto) ProtoMessage() {}

func (x *Scoporapporto) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoporapporto.ProtoReflect.Descriptor instead.
func (*Scoporapporto) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{56}
}

func (x *Scoporapporto) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Scoporapporto) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Scoporapporto) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Scoporapporto) GetTrasferimentoQuote() bool {
	if x != nil {
		return x.TrasferimentoQuote
	}
	return false
}

type Periodicita struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Periodicita) Reset() {
	*x = Periodicita{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Periodicita) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodicita) ProtoMessage() {}

func (x *Periodicita) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodicita.ProtoReflect.Descriptor instead.
func (*Periodicita) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{57}
}

func (x *Periodicita) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Periodicita) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Periodicita) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Operatoretelefonico struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Operatoretelefonico) Reset() {
	*x = Operatoretelefonico{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operatoretelefonico) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operatoretelefonico) ProtoMessage() {}

func (x *Operatoretelefonico) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operatoretelefonico.ProtoReflect.Descriptor instead.
func (*Operatoretelefonico) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{58}
}

func (x *Operatoretelefonico) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Operatoretelefonico) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Operatoretelefonico) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Naturarapporto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Naturarapporto) Reset() {
	*x = Naturarapporto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Naturarapporto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Naturarapporto) ProtoMessage() {}

func (x *Naturarapporto) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Naturarapporto.ProtoReflect.Descriptor instead.
func (*Naturarapporto) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{59}
}

func (x *Naturarapporto) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Naturarapporto) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Naturarapporto) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Formato struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Formato) Reset() {
	*x = Formato{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formato) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formato) ProtoMessage() {}

func (x *Formato) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formato.ProtoReflect.Descriptor instead.
func (*Formato) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{60}
}

func (x *Formato) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Formato) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Formato) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Categoriacondizioni struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	Messaggio   string `protobuf:"bytes,3,opt,name=messaggio,proto3" json:"messaggio,omitempty"`
	FlagDefault uint32 `protobuf:"varint,4,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
	OrderList   uint32 `protobuf:"varint,5,opt,name=orderList,proto3" json:"orderList,omitempty"`
}

func (x *Categoriacondizioni) Reset() {
	*x = Categoriacondizioni{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Categoriacondizioni) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categoriacondizioni) ProtoMessage() {}

func (x *Categoriacondizioni) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categoriacondizioni.ProtoReflect.Descriptor instead.
func (*Categoriacondizioni) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{61}
}

func (x *Categoriacondizioni) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Categoriacondizioni) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Categoriacondizioni) GetMessaggio() string {
	if x != nil {
		return x.Messaggio
	}
	return ""
}

func (x *Categoriacondizioni) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

func (x *Categoriacondizioni) GetOrderList() uint32 {
	if x != nil {
		return x.OrderList
	}
	return 0
}

type Categoriacliente struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Categoriacliente) Reset() {
	*x = Categoriacliente{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Categoriacliente) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categoriacliente) ProtoMessage() {}

func (x *Categoriacliente) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categoriacliente.ProtoReflect.Descriptor instead.
func (*Categoriacliente) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{62}
}

func (x *Categoriacliente) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Categoriacliente) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Categoriacliente) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Rapportopb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Rapportopb) Reset() {
	*x = Rapportopb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rapportopb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rapportopb) ProtoMessage() {}

func (x *Rapportopb) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rapportopb.ProtoReflect.Descriptor instead.
func (*Rapportopb) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{63}
}

func (x *Rapportopb) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Rapportopb) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Rapportopb) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Mezzoconsegna struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Mezzoconsegna) Reset() {
	*x = Mezzoconsegna{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mezzoconsegna) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mezzoconsegna) ProtoMessage() {}

func (x *Mezzoconsegna) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mezzoconsegna.ProtoReflect.Descriptor instead.
func (*Mezzoconsegna) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{64}
}

func (x *Mezzoconsegna) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Mezzoconsegna) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Mezzoconsegna) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Adeguataverifica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Adeguataverifica) Reset() {
	*x = Adeguataverifica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adeguataverifica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adeguataverifica) ProtoMessage() {}

func (x *Adeguataverifica) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adeguataverifica.ProtoReflect.Descriptor instead.
func (*Adeguataverifica) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{65}
}

func (x *Adeguataverifica) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Adeguataverifica) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Adeguataverifica) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Filiali struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice        string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione   string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DescrizioneId string `protobuf:"bytes,3,opt,name=descrizioneId,proto3" json:"descrizioneId,omitempty"`
	FlagDefault   uint32 `protobuf:"varint,4,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Filiali) Reset() {
	*x = Filiali{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filiali) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filiali) ProtoMessage() {}

func (x *Filiali) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filiali.ProtoReflect.Descriptor instead.
func (*Filiali) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{66}
}

func (x *Filiali) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Filiali) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Filiali) GetDescrizioneId() string {
	if x != nil {
		return x.DescrizioneId
	}
	return ""
}

func (x *Filiali) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Modalitaco struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	FlagDefault uint32 `protobuf:"varint,3,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Modalitaco) Reset() {
	*x = Modalitaco{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modalitaco) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modalitaco) ProtoMessage() {}

func (x *Modalitaco) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modalitaco.ProtoReflect.Descriptor instead.
func (*Modalitaco) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{67}
}

func (x *Modalitaco) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Modalitaco) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Modalitaco) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Sesso struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice           string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione      string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DescrizioneBreve string `protobuf:"bytes,3,opt,name=descrizioneBreve,proto3" json:"descrizioneBreve,omitempty"`
	FlagDefault      uint32 `protobuf:"varint,4,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Sesso) Reset() {
	*x = Sesso{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sesso) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sesso) ProtoMessage() {}

func (x *Sesso) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sesso.ProtoReflect.Descriptor instead.
func (*Sesso) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{68}
}

func (x *Sesso) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Sesso) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Sesso) GetDescrizioneBreve() string {
	if x != nil {
		return x.DescrizioneBreve
	}
	return ""
}

func (x *Sesso) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Opzionipossibili struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chiave string `protobuf:"bytes,1,opt,name=chiave,proto3" json:"chiave,omitempty"`
	Valore string `protobuf:"bytes,2,opt,name=valore,proto3" json:"valore,omitempty"`
}

func (x *Opzionipossibili) Reset() {
	*x = Opzionipossibili{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Opzionipossibili) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opzionipossibili) ProtoMessage() {}

func (x *Opzionipossibili) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opzionipossibili.ProtoReflect.Descriptor instead.
func (*Opzionipossibili) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{69}
}

func (x *Opzionipossibili) GetChiave() string {
	if x != nil {
		return x.Chiave
	}
	return ""
}

func (x *Opzionipossibili) GetValore() string {
	if x != nil {
		return x.Valore
	}
	return ""
}

type Rispostepossibili struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdRisposta       string              `protobuf:"bytes,1,opt,name=idRisposta,proto3" json:"idRisposta,omitempty"`
	DescrRisposta    string              `protobuf:"bytes,2,opt,name=descrRisposta,proto3" json:"descrRisposta,omitempty"`
	OpzioniPossibili []*Opzionipossibili `protobuf:"bytes,3,rep,name=opzioniPossibili,proto3" json:"opzioniPossibili,omitempty"`
}

func (x *Rispostepossibili) Reset() {
	*x = Rispostepossibili{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rispostepossibili) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rispostepossibili) ProtoMessage() {}

func (x *Rispostepossibili) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rispostepossibili.ProtoReflect.Descriptor instead.
func (*Rispostepossibili) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{70}
}

func (x *Rispostepossibili) GetIdRisposta() string {
	if x != nil {
		return x.IdRisposta
	}
	return ""
}

func (x *Rispostepossibili) GetDescrRisposta() string {
	if x != nil {
		return x.DescrRisposta
	}
	return ""
}

func (x *Rispostepossibili) GetOpzioniPossibili() []*Opzionipossibili {
	if x != nil {
		return x.OpzioniPossibili
	}
	return nil
}

type Coppiadomandarispostamifid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdDomanda         string               `protobuf:"bytes,1,opt,name=idDomanda,proto3" json:"idDomanda,omitempty"`
	DescrDomanda      string               `protobuf:"bytes,2,opt,name=descrDomanda,proto3" json:"descrDomanda,omitempty"`
	RispostePossibili []*Rispostepossibili `protobuf:"bytes,3,rep,name=rispostePossibili,proto3" json:"rispostePossibili,omitempty"`
}

func (x *Coppiadomandarispostamifid) Reset() {
	*x = Coppiadomandarispostamifid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coppiadomandarispostamifid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coppiadomandarispostamifid) ProtoMessage() {}

func (x *Coppiadomandarispostamifid) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coppiadomandarispostamifid.ProtoReflect.Descriptor instead.
func (*Coppiadomandarispostamifid) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{71}
}

func (x *Coppiadomandarispostamifid) GetIdDomanda() string {
	if x != nil {
		return x.IdDomanda
	}
	return ""
}

func (x *Coppiadomandarispostamifid) GetDescrDomanda() string {
	if x != nil {
		return x.DescrDomanda
	}
	return ""
}

func (x *Coppiadomandarispostamifid) GetRispostePossibili() []*Rispostepossibili {
	if x != nil {
		return x.RispostePossibili
	}
	return nil
}

type Opzionipossibili1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chiave string `protobuf:"bytes,1,opt,name=chiave,proto3" json:"chiave,omitempty"`
	Valore string `protobuf:"bytes,2,opt,name=valore,proto3" json:"valore,omitempty"`
}

func (x *Opzionipossibili1) Reset() {
	*x = Opzionipossibili1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Opzionipossibili1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opzionipossibili1) ProtoMessage() {}

func (x *Opzionipossibili1) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opzionipossibili1.ProtoReflect.Descriptor instead.
func (*Opzionipossibili1) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{72}
}

func (x *Opzionipossibili1) GetChiave() string {
	if x != nil {
		return x.Chiave
	}
	return ""
}

func (x *Opzionipossibili1) GetValore() string {
	if x != nil {
		return x.Valore
	}
	return ""
}

type Rispostepossibili1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdRisposta       string               `protobuf:"bytes,1,opt,name=idRisposta,proto3" json:"idRisposta,omitempty"`
	DescrRisposta    string               `protobuf:"bytes,2,opt,name=descrRisposta,proto3" json:"descrRisposta,omitempty"`
	OpzioniPossibili []*Opzionipossibili1 `protobuf:"bytes,3,rep,name=opzioniPossibili,proto3" json:"opzioniPossibili,omitempty"`
}

func (x *Rispostepossibili1) Reset() {
	*x = Rispostepossibili1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rispostepossibili1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rispostepossibili1) ProtoMessage() {}

func (x *Rispostepossibili1) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rispostepossibili1.ProtoReflect.Descriptor instead.
func (*Rispostepossibili1) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{73}
}

func (x *Rispostepossibili1) GetIdRisposta() string {
	if x != nil {
		return x.IdRisposta
	}
	return ""
}

func (x *Rispostepossibili1) GetDescrRisposta() string {
	if x != nil {
		return x.DescrRisposta
	}
	return ""
}

func (x *Rispostepossibili1) GetOpzioniPossibili() []*Opzionipossibili1 {
	if x != nil {
		return x.OpzioniPossibili
	}
	return nil
}

type Coppiadomandarispostaqavpb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdDomanda         string                `protobuf:"bytes,1,opt,name=idDomanda,proto3" json:"idDomanda,omitempty"`
	DescrDomanda      string                `protobuf:"bytes,2,opt,name=descrDomanda,proto3" json:"descrDomanda,omitempty"`
	RispostePossibili []*Rispostepossibili1 `protobuf:"bytes,3,rep,name=rispostePossibili,proto3" json:"rispostePossibili,omitempty"`
}

func (x *Coppiadomandarispostaqavpb) Reset() {
	*x = Coppiadomandarispostaqavpb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coppiadomandarispostaqavpb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coppiadomandarispostaqavpb) ProtoMessage() {}

func (x *Coppiadomandarispostaqavpb) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coppiadomandarispostaqavpb.ProtoReflect.Descriptor instead.
func (*Coppiadomandarispostaqavpb) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{74}
}

func (x *Coppiadomandarispostaqavpb) GetIdDomanda() string {
	if x != nil {
		return x.IdDomanda
	}
	return ""
}

func (x *Coppiadomandarispostaqavpb) GetDescrDomanda() string {
	if x != nil {
		return x.DescrDomanda
	}
	return ""
}

func (x *Coppiadomandarispostaqavpb) GetRispostePossibili() []*Rispostepossibili1 {
	if x != nil {
		return x.RispostePossibili
	}
	return nil
}

type Classepatrimonio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice                      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	SeiDescrizione              string `protobuf:"bytes,2,opt,name=seiDescrizione,proto3" json:"seiDescrizione,omitempty"`
	SeiDescrizioneEstesa        string `protobuf:"bytes,3,opt,name=seiDescrizioneEstesa,proto3" json:"seiDescrizioneEstesa,omitempty"`
	SeiPrivateDescrizione       string `protobuf:"bytes,4,opt,name=seiPrivateDescrizione,proto3" json:"seiPrivateDescrizione,omitempty"`
	SeiPrivateDescrizioneEstesa string `protobuf:"bytes,5,opt,name=seiPrivateDescrizioneEstesa,proto3" json:"seiPrivateDescrizioneEstesa,omitempty"`
	FlagDefault                 uint32 `protobuf:"varint,6,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Classepatrimonio) Reset() {
	*x = Classepatrimonio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Classepatrimonio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classepatrimonio) ProtoMessage() {}

func (x *Classepatrimonio) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classepatrimonio.ProtoReflect.Descriptor instead.
func (*Classepatrimonio) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{75}
}

func (x *Classepatrimonio) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Classepatrimonio) GetSeiDescrizione() string {
	if x != nil {
		return x.SeiDescrizione
	}
	return ""
}

func (x *Classepatrimonio) GetSeiDescrizioneEstesa() string {
	if x != nil {
		return x.SeiDescrizioneEstesa
	}
	return ""
}

func (x *Classepatrimonio) GetSeiPrivateDescrizione() string {
	if x != nil {
		return x.SeiPrivateDescrizione
	}
	return ""
}

func (x *Classepatrimonio) GetSeiPrivateDescrizioneEstesa() string {
	if x != nil {
		return x.SeiPrivateDescrizioneEstesa
	}
	return ""
}

func (x *Classepatrimonio) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Modalitapagamento struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice            string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione       string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DescrizioneEstesa string `protobuf:"bytes,3,opt,name=descrizioneEstesa,proto3" json:"descrizioneEstesa,omitempty"`
	FlagDefault       uint32 `protobuf:"varint,4,opt,name=flagDefault,proto3" json:"flagDefault,omitempty"`
}

func (x *Modalitapagamento) Reset() {
	*x = Modalitapagamento{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modalitapagamento) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modalitapagamento) ProtoMessage() {}

func (x *Modalitapagamento) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modalitapagamento.ProtoReflect.Descriptor instead.
func (*Modalitapagamento) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{76}
}

func (x *Modalitapagamento) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Modalitapagamento) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Modalitapagamento) GetDescrizioneEstesa() string {
	if x != nil {
		return x.DescrizioneEstesa
	}
	return ""
}

func (x *Modalitapagamento) GetFlagDefault() uint32 {
	if x != nil {
		return x.FlagDefault
	}
	return 0
}

type Livelloagevolazione struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modalita    string `protobuf:"bytes,1,opt,name=modalita,proto3" json:"modalita,omitempty"`
	SubProdotto string `protobuf:"bytes,2,opt,name=subProdotto,proto3" json:"subProdotto,omitempty"`
	Percentuale string `protobuf:"bytes,3,opt,name=percentuale,proto3" json:"percentuale,omitempty"`
}

func (x *Livelloagevolazione) Reset() {
	*x = Livelloagevolazione{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Livelloagevolazione) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Livelloagevolazione) ProtoMessage() {}

func (x *Livelloagevolazione) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Livelloagevolazione.ProtoReflect.Descriptor instead.
func (*Livelloagevolazione) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{77}
}

func (x *Livelloagevolazione) GetModalita() string {
	if x != nil {
		return x.Modalita
	}
	return ""
}

func (x *Livelloagevolazione) GetSubProdotto() string {
	if x != nil {
		return x.SubProdotto
	}
	return ""
}

func (x *Livelloagevolazione) GetPercentuale() string {
	if x != nil {
		return x.Percentuale
	}
	return ""
}

type Livelloagevolazionetrim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modalita    string `protobuf:"bytes,1,opt,name=modalita,proto3" json:"modalita,omitempty"`
	SubProdotto string `protobuf:"bytes,2,opt,name=subProdotto,proto3" json:"subProdotto,omitempty"`
	Percentuale string `protobuf:"bytes,3,opt,name=percentuale,proto3" json:"percentuale,omitempty"`
}

func (x *Livelloagevolazionetrim) Reset() {
	*x = Livelloagevolazionetrim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Livelloagevolazionetrim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Livelloagevolazionetrim) ProtoMessage() {}

func (x *Livelloagevolazionetrim) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Livelloagevolazionetrim.ProtoReflect.Descriptor instead.
func (*Livelloagevolazionetrim) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{78}
}

func (x *Livelloagevolazionetrim) GetModalita() string {
	if x != nil {
		return x.Modalita
	}
	return ""
}

func (x *Livelloagevolazionetrim) GetSubProdotto() string {
	if x != nil {
		return x.SubProdotto
	}
	return ""
}

func (x *Livelloagevolazionetrim) GetPercentuale() string {
	if x != nil {
		return x.Percentuale
	}
	return ""
}

type Listabanche struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice             string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione        string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	DescrizioneRidotta string `protobuf:"bytes,3,opt,name=descrizioneRidotta,proto3" json:"descrizioneRidotta,omitempty"`
}

func (x *Listabanche) Reset() {
	*x = Listabanche{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listabanche) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listabanche) ProtoMessage() {}

func (x *Listabanche) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listabanche.ProtoReflect.Descriptor instead.
func (*Listabanche) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{79}
}

func (x *Listabanche) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Listabanche) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Listabanche) GetDescrizioneRidotta() string {
	if x != nil {
		return x.DescrizioneRidotta
	}
	return ""
}

type Iniziativecommerciali struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	IsAttivo    bool   `protobuf:"varint,3,opt,name=isAttivo,proto3" json:"isAttivo,omitempty"`
}

func (x *Iniziativecommerciali) Reset() {
	*x = Iniziativecommerciali{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iniziativecommerciali) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iniziativecommerciali) ProtoMessage() {}

func (x *Iniziativecommerciali) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iniziativecommerciali.ProtoReflect.Descriptor instead.
func (*Iniziativecommerciali) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{80}
}

func (x *Iniziativecommerciali) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Iniziativecommerciali) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Iniziativecommerciali) GetIsAttivo() bool {
	if x != nil {
		return x.IsAttivo
	}
	return false
}

type Listaisin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice              string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Classe              string `protobuf:"bytes,2,opt,name=classe,proto3" json:"classe,omitempty"`
	Descrizione         string `protobuf:"bytes,3,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
	CodiceProdotto      string `protobuf:"bytes,4,opt,name=codiceProdotto,proto3" json:"codiceProdotto,omitempty"`
	DescrizioneProdotto string `protobuf:"bytes,5,opt,name=descrizioneProdotto,proto3" json:"descrizioneProdotto,omitempty"`
	CodiceSottoprodotto string `protobuf:"bytes,6,opt,name=codiceSottoprodotto,proto3" json:"codiceSottoprodotto,omitempty"`
}

func (x *Listaisin) Reset() {
	*x = Listaisin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listaisin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listaisin) ProtoMessage() {}

func (x *Listaisin) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listaisin.ProtoReflect.Descriptor instead.
func (*Listaisin) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{81}
}

func (x *Listaisin) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Listaisin) GetClasse() string {
	if x != nil {
		return x.Classe
	}
	return ""
}

func (x *Listaisin) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

func (x *Listaisin) GetCodiceProdotto() string {
	if x != nil {
		return x.CodiceProdotto
	}
	return ""
}

func (x *Listaisin) GetDescrizioneProdotto() string {
	if x != nil {
		return x.DescrizioneProdotto
	}
	return ""
}

func (x *Listaisin) GetCodiceSottoprodotto() string {
	if x != nil {
		return x.CodiceSottoprodotto
	}
	return ""
}

type Rapportocointestatari struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
}

func (x *Rapportocointestatari) Reset() {
	*x = Rapportocointestatari{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rapportocointestatari) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rapportocointestatari) ProtoMessage() {}

func (x *Rapportocointestatari) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rapportocointestatari.ProtoReflect.Descriptor instead.
func (*Rapportocointestatari) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{82}
}

func (x *Rapportocointestatari) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Rapportocointestatari) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

type Ordiniaddebito struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
}

func (x *Ordiniaddebito) Reset() {
	*x = Ordiniaddebito{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ordiniaddebito) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ordiniaddebito) ProtoMessage() {}

func (x *Ordiniaddebito) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ordiniaddebito.ProtoReflect.Descriptor instead.
func (*Ordiniaddebito) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{83}
}

func (x *Ordiniaddebito) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Ordiniaddebito) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

type Prefissiinternazionali struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefisso string `protobuf:"bytes,1,opt,name=prefisso,proto3" json:"prefisso,omitempty"`
	Nazione  string `protobuf:"bytes,2,opt,name=nazione,proto3" json:"nazione,omitempty"`
}

func (x *Prefissiinternazionali) Reset() {
	*x = Prefissiinternazionali{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefissiinternazionali) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefissiinternazionali) ProtoMessage() {}

func (x *Prefissiinternazionali) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefissiinternazionali.ProtoReflect.Descriptor instead.
func (*Prefissiinternazionali) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{84}
}

func (x *Prefissiinternazionali) GetPrefisso() string {
	if x != nil {
		return x.Prefisso
	}
	return ""
}

func (x *Prefissiinternazionali) GetNazione() string {
	if x != nil {
		return x.Nazione
	}
	return ""
}

type Circuitipagamento struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codice      string `protobuf:"bytes,1,opt,name=codice,proto3" json:"codice,omitempty"`
	Descrizione string `protobuf:"bytes,2,opt,name=descrizione,proto3" json:"descrizione,omitempty"`
}

func (x *Circuitipagamento) Reset() {
	*x = Circuitipagamento{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_CustomerOnboardingService_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circuitipagamento) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circuitipagamento) ProtoMessage() {}

func (x *Circuitipagamento) ProtoReflect() protoreflect.Message {
	mi := &file_v1_CustomerOnboardingService_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circuitipagamento.ProtoReflect.Descriptor instead.
func (*Circuitipagamento) Descriptor() ([]byte, []int) {
	return file_v1_CustomerOnboardingService_proto_rawDescGZIP(), []int{85}
}

func (x *Circuitipagamento) GetCodice() string {
	if x != nil {
		return x.Codice
	}
	return ""
}

func (x *Circuitipagamento) GetDescrizione() string {
	if x != nil {
		return x.Descrizione
	}
	return ""
}

var File_v1_CustomerOnboardingService_proto protoreflect.FileDescriptor

var file_v1_CustomerOnboardingService_proto_rawDesc = []byte{
	0x0a, 0x22, 0x76, 0x31, 0x2f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f,
	0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x62, 0x69, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x61, 0x62, 0x69, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x62, 0x69, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x74,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x63, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x79, 0x6b, 0x65, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x7d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x62, 0x69, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x62, 0x69, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x62, 0x69, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x52, 0x05,
	0x6d, 0x69, 0x66, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x68, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x05, 0x4d, 0x69,
	0x66, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x13, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22,
	0x69, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x9b, 0x03, 0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x6f, 0x6e,
	0x79, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x6f, 0x6e, 0x79,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x65, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe1, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xe9, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x49, 0x64, 0x31, 0x12, 0x46,
	0x0a, 0x1d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69,
	0x73, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x32, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x49, 0x64, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x65, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x32, 0x22, 0xa8, 0x02,
	0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x61,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xea, 0x0e, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x45, 0x63, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6b,
	0x65, 0x79, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6b, 0x65, 0x79, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6b,
	0x65, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x62, 0x61, 0x6e, 0x63,
	0x6f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x12, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6d,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x61, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x72, 0x64, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x68, 0x72, 0x64, 0x32, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x66, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x69, 0x64, 0x65,
	0x75, 0x72, 0x61, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x66, 0x69, 0x64, 0x65, 0x75, 0x72, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x17, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x17, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x71, 0x75, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x71, 0x75,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x33, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x33, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x17,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x16, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x66, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x08, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x69, 0x64, 0x65, 0x75,
	0x72, 0x61, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x66, 0x69, 0x64, 0x65, 0x75, 0x72, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x92, 0x18, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x69, 0x76, 0x69, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x69, 0x76, 0x69, 0x74, 0x61, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x69, 0x76, 0x69, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x74, 0x65,
	0x63, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x74, 0x65, 0x63, 0x6f, 0x52, 0x05, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x12, 0x2a, 0x0a, 0x03, 0x73,
	0x61, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x61, 0x65, 0x52, 0x03, 0x73, 0x61, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6e,
	0x69, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x6d, 0x6f, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6e, 0x69,
	0x6d, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x61, 0x7a, 0x69,
	0x6f, 0x6e, 0x69, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4e, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x52, 0x07, 0x6e, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x69,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x69, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x69, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x69, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x41, 0x66, 0x66, 0x61, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x61, 0x66, 0x66, 0x61, 0x72, 0x69, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x41, 0x66, 0x66, 0x61, 0x72, 0x69, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x12, 0x39, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x52, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x64, 0x69, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x65, 0x66, 0x6f, 0x6e, 0x64, 0x69,
	0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x64, 0x69, 0x12, 0x4b,
	0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6f, 0x6c, 0x6f, 0x44, 0x69, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x74,
	0x6f, 0x6c, 0x6f, 0x64, 0x69, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0e, 0x74, 0x69, 0x74,
	0x6f, 0x6c, 0x6f, 0x44, 0x69, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x61,
	0x6e, 0x61, 0x44, 0x6f, 0x63, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x6e, 0x61, 0x64, 0x6f, 0x63, 0x52, 0x06, 0x61, 0x6e, 0x61, 0x44, 0x6f, 0x63,
	0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x61, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x74, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x6f, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x6f, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x6f, 0x72, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x63,
	0x6f, 0x70, 0x6f, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69,
	0x74, 0x61, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x61, 0x12,
	0x5a, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x6c, 0x65,
	0x66, 0x6f, 0x6e, 0x69, 0x63, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x6c, 0x65,
	0x66, 0x6f, 0x6e, 0x69, 0x63, 0x6f, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x65, 0x6c, 0x65, 0x66, 0x6f, 0x6e, 0x69, 0x63, 0x6f, 0x12, 0x4b, 0x0a, 0x0e, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x72, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x52, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f,
	0x12, 0x5a, 0x0a, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x52, 0x10, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x72, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x50, 0x62, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x6f, 0x70, 0x62, 0x52, 0x0a, 0x72, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x50, 0x62,
	0x12, 0x48, 0x0a, 0x0d, 0x6d, 0x65, 0x7a, 0x7a, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x67, 0x6e,
	0x61, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x7a, 0x7a, 0x6f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x67, 0x6e, 0x61, 0x52, 0x0d, 0x6d, 0x65, 0x7a,
	0x7a, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x67, 0x6e, 0x61, 0x12, 0x51, 0x0a, 0x10, 0x61, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x65, 0x67, 0x75,
	0x61, 0x74, 0x61, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x52, 0x10, 0x61, 0x64, 0x65,
	0x67, 0x75, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x12, 0x36, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x6c, 0x69, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x69, 0x61, 0x6c, 0x69, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x6c, 0x69, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74,
	0x61, 0x43, 0x6f, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x63, 0x6f, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x69, 0x74, 0x61, 0x43, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x6f, 0x52, 0x05, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x12, 0x6f, 0x0a, 0x1a, 0x63, 0x6f, 0x70, 0x70,
	0x69, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x70, 0x70, 0x69, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x52, 0x1a, 0x63,
	0x6f, 0x70, 0x70, 0x69, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x52, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x12, 0x6f, 0x0a, 0x1a, 0x63, 0x6f, 0x70,
	0x70, 0x69, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x51, 0x61, 0x76, 0x50, 0x62, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x70, 0x70, 0x69, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x71, 0x61, 0x76, 0x70, 0x62, 0x52, 0x1a,
	0x63, 0x6f, 0x70, 0x70, 0x69, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x52, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x51, 0x61, 0x76, 0x50, 0x62, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x50, 0x61, 0x74, 0x72, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x6f, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x6f, 0x52, 0x10, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x50, 0x61, 0x74, 0x72, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x6f, 0x12, 0x54, 0x0a,
	0x11, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x50, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x70, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x50, 0x61, 0x67, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x41, 0x67,
	0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x61, 0x67,
	0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x76, 0x65,
	0x6c, 0x6c, 0x6f, 0x41, 0x67, 0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12,
	0x66, 0x0a, 0x17, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x41, 0x67, 0x65, 0x76, 0x6f, 0x6c,
	0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x6d, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x61, 0x67,
	0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x74, 0x72, 0x69, 0x6d, 0x52, 0x17,
	0x6c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x41, 0x67, 0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x61,
	0x42, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x62, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x52, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x61, 0x42, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x69,
	0x6e, 0x69, 0x7a, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x69, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x49, 0x6e, 0x69, 0x7a, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x7a, 0x69, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x12, 0x3c, 0x0a,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x49, 0x73, 0x69, 0x6e, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x69, 0x73, 0x69, 0x6e,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x49, 0x73, 0x69, 0x6e, 0x12, 0x60, 0x0a, 0x15, 0x72,
	0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x61, 0x72, 0x69, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x63, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x61, 0x72, 0x69, 0x52, 0x15, 0x72, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f,
	0x43, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x61, 0x72, 0x69, 0x12, 0x4b, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x69, 0x41, 0x64, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x69,
	0x6e, 0x69, 0x61, 0x64, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x69, 0x41, 0x64, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x16, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x73, 0x73, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x7a, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x73, 0x73, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x7a, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x69, 0x73, 0x73,
	0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x12,
	0x54, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x69, 0x50, 0x61, 0x67, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x6f, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x69, 0x70, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x69, 0x50, 0x61, 0x67, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x35, 0x0a, 0x16, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x2d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xcb, 0x0b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x02, 0x52, 0x0b, 0x68,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x03, 0x52, 0x0b,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x09, 0x73, 0x61, 0x65, 0x5f, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x04, 0x52, 0x08, 0x73, 0x61,
	0x65, 0x41, 0x74, 0x65, 0x63, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x65, 0x70,
	0x5f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x05, 0x52, 0x0e,
	0x70, 0x65, 0x70, 0x55, 0x73, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x06, 0x52, 0x05, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x07, 0x52, 0x10, 0x62, 0x61,
	0x6e, 0x63, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x08, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x0a, 0x52, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x0b, 0x52, 0x12, 0x70, 0x6f,
	0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x1b, 0x70, 0x65, 0x70, 0x5f, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x0c, 0x52, 0x18, 0x70, 0x65, 0x70, 0x55, 0x73, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x0e, 0x52, 0x14, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x68, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x65, 0x5f,
	0x61, 0x74, 0x65, 0x63, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x69, 0x66, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x70, 0x65, 0x70, 0x5f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x39,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89,
	0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x24, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7d, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66,
	0x69, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d,
	0x69, 0x66, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x21, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x63, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x30, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x24, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x66,
	0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x69, 0x66, 0x69, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x25, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x1f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x4e, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x4e, 0x61, 0x67, 0x22,
	0x95, 0x01, 0x0a, 0x05, 0x41, 0x74, 0x65, 0x63, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x52, 0x69, 0x64, 0x6f, 0x74, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x52, 0x69, 0x64, 0x6f,
	0x74, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x03, 0x53, 0x61, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x08, 0x54,
	0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x22, 0x64, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a,
	0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	0x69, 0x6f, 0x4e, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x4e, 0x61, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x7a,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x69, 0x7a, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6e, 0x65,
	0x22, 0xf7, 0x01, 0x0a, 0x07, 0x4e, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x67,
	0x4e, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x73, 0x63, 0x69, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x4e, 0x61, 0x73, 0x63, 0x69, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x6f,
	0x6c, 0x6f, 0x4e, 0x61, 0x73, 0x63, 0x69, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x73, 0x53, 0x6f, 0x6c, 0x6f, 0x4e, 0x61, 0x73, 0x63, 0x69, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x7a, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x7a, 0x69, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6e, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x76, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x64, 0x76, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67,
	0x46, 0x66, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x46,
	0x66, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x61, 0x66, 0x66, 0x61, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x4e,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x4e, 0x61, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x22, 0xb8, 0x01,
	0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x65, 0x66, 0x6f, 0x6e, 0x64, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x45, 0x73, 0x74, 0x65, 0x73, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65,
	0x45, 0x73, 0x74, 0x65, 0x73, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x69,
	0x6e, 0x69, 0x6f, 0x4e, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x4e, 0x61, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x74,
	0x6f, 0x6c, 0x6f, 0x64, 0x69, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x69, 0x63,
	0x65, 0x50, 0x64, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x69,
	0x63, 0x65, 0x50, 0x64, 0x66, 0x22, 0xbe, 0x01, 0x0a, 0x06, 0x41, 0x6e, 0x61, 0x64, 0x6f, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x45,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x4e, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x69,
	0x6e, 0x69, 0x6f, 0x4e, 0x61, 0x67, 0x22, 0x68, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6f, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x6f, 0x72, 0x61, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x73, 0x66, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x72, 0x61, 0x73,
	0x66, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x69,
	0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a,
	0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c,
	0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x66, 0x6f, 0x6e, 0x69, 0x63, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c,
	0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x0e,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x72, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66,
	0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x07, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x67, 0x69, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x67, 0x69,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x6e, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0x68, 0x0a, 0x0a, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x70, 0x62, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x6b, 0x0a, 0x0d, 0x4d,
	0x65, 0x7a, 0x7a, 0x6f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x67, 0x6e, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x6e, 0x0a, 0x10, 0x41, 0x64, 0x65, 0x67,
	0x75, 0x61, 0x74, 0x61, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c,
	0x69, 0x61, 0x6c, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x68, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69,
	0x74, 0x61, 0x63, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x8f, 0x01, 0x0a, 0x05, 0x53, 0x65, 0x73, 0x73, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a,
	0x69, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x76, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x4f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x52, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x12, 0x51, 0x0a, 0x10, 0x6f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x52, 0x10, 0x6f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x70, 0x69, 0x61,
	0x64, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6d,
	0x69, 0x66, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x12, 0x54, 0x0a, 0x11, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x52, 0x11, 0x72, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x22, 0x43, 0x0a, 0x11,
	0x4f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x31, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x6f, 0x72,
	0x65, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x70, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x52, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x12, 0x52,
	0x0a, 0x10, 0x6f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x31,
	0x52, 0x10, 0x6f, 0x70, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x70, 0x69, 0x61, 0x64, 0x6f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x71, 0x61, 0x76, 0x70,
	0x62, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x44, 0x6f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x70, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x31, 0x52, 0x11, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x69, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x69, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x73, 0x65, 0x69, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x45, 0x73, 0x74, 0x65, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x65, 0x69, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x45, 0x73, 0x74,
	0x65, 0x73, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x69, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x69, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x69,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x45, 0x73, 0x74, 0x65, 0x73, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x73, 0x65, 0x69, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x45, 0x73, 0x74, 0x65, 0x73, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x9d, 0x01,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x70, 0x61, 0x67, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x45, 0x73, 0x74, 0x65,
	0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x45, 0x73, 0x74, 0x65, 0x73, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a,
	0x13, 0x4c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x61, 0x67, 0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a,
	0x69, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74,
	0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x75, 0x61, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x6c, 0x6c, 0x6f, 0x61,
	0x67, 0x65, 0x76, 0x6f, 0x6c, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x74, 0x72, 0x69, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x65, 0x22,
	0x77, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x62, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x52, 0x69, 0x64, 0x6f, 0x74, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x52, 0x69, 0x64, 0x6f, 0x74, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x7a,
	0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x74, 0x74, 0x69, 0x76, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x74, 0x74, 0x69, 0x76, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x61, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a,
	0x69, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x12,
	0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74,
	0x6f, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x74, 0x74, 0x6f,
	0x70, 0x72, 0x6f, 0x64, 0x6f, 0x74, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x74, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x6f,
	0x74, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x15, 0x52, 0x61, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x63,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x61, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x69,
	0x61, 0x64, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x66, 0x69, 0x73, 0x73, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x7a, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x73, 0x73, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x73, 0x73, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x7a, 0x69,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x7a, 0x69, 0x6f,
	0x6e, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x69, 0x70, 0x61,
	0x67, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e,
	0x65, 0x2a, 0x21, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x32, 0x88, 0x28, 0x0a, 0x19, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2d, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x74,
	0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f, 0x74, 0x70, 0x3a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f,
	0x74, 0x70, 0x3a, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x4d,
	0x69, 0x66, 0x69, 0x64, 0x12, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d,
	0x69, 0x66, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6d, 0x69, 0x66, 0x69, 0x64,
	0x12, 0x7b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x78, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17,
	0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x77, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x1d, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x66,
	0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x66, 0x69,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f,
	0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x2b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x42, 0x24,
	0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x12, 0x1c, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x21, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x39, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x1a, 0x33, 0x2f, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x2d, 0x68, 0x6f, 0x6d, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x97, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x1a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61, 0x65, 0x41,
	0x74, 0x65, 0x63, 0x6f, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a,
	0x26, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x61,
	0x65, 0x2d, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x70, 0x55, 0x73, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x65, 0x70, 0x2d, 0x75, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66, 0x69, 0x64,
	0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66, 0x69, 0x64, 0x41, 0x6e, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x66, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x1a, 0x22, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6e, 0x63, 0x6f,
	0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x1a, 0x2f, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x21, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x39, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x1a, 0x33, 0x2f, 0x70, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x2d, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x1a, 0x2a,
	0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa0, 0x01, 0x0a, 0x1a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x1a, 0x27, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d, 0x6f, 0x74, 0x70, 0x12, 0xa4, 0x01,
	0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x1a, 0x2a,
	0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x9d, 0x01, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x1a, 0x2f, 0x2f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x1a, 0x30, 0x2f, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0xad, 0x01, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x65, 0x70, 0x55, 0x73, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a,
	0x01, 0x2a, 0x1a, 0x38, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x65, 0x70, 0x2d, 0x75, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x66, 0x69, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x1a, 0x33, 0x2f, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x2d, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x72, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x42, 0xad, 0x01, 0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x73, 0x70, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x62, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x70, 0x69, 0x61, 0x6e, 0x63, 0x68, 0x2f, 0x69, 0x73, 0x70, 0x2d, 0x62, 0x65, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2d, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x3b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_CustomerOnboardingService_proto_rawDescOnce sync.Once
	file_v1_CustomerOnboardingService_proto_rawDescData = file_v1_CustomerOnboardingService_proto_rawDesc
)

func file_v1_CustomerOnboardingService_proto_rawDescGZIP() []byte {
	file_v1_CustomerOnboardingService_proto_rawDescOnce.Do(func() {
		file_v1_CustomerOnboardingService_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_CustomerOnboardingService_proto_rawDescData)
	})
	return file_v1_CustomerOnboardingService_proto_rawDescData
}

var file_v1_CustomerOnboardingService_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_CustomerOnboardingService_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_v1_CustomerOnboardingService_proto_goTypes = []interface{}{
	(ServiceStatus)(0),                            // 0: customer.onboarding.ServiceStatus
	(AccountType)(0),                              // 1: customer.onboarding.AccountType
	(*VerifyOtpCodeRequest)(nil),                  // 2: customer.onboarding.VerifyOtpCodeRequest
	(*SendOtpCodeRequest)(nil),                    // 3: customer.onboarding.SendOtpCodeRequest
	(*SendOtpCodeResponse)(nil),                   // 4: customer.onboarding.SendOtpCodeResponse
	(*CreateProcedureRequest)(nil),                // 5: customer.onboarding.CreateProcedureRequest
	(*StatusReply)(nil),                           // 6: customer.onboarding.StatusReply
	(*CreateCustomerResponse)(nil),                // 7: customer.onboarding.CreateCustomerResponse
	(*CreateProcedureResponse)(nil),               // 8: customer.onboarding.CreateProcedureResponse
	(*SaveMifidRequest)(nil),                      // 9: customer.onboarding.SaveMifidRequest
	(*Answer)(nil),                                // 10: customer.onboarding.Answer
	(*QuestionsAndAnswers)(nil),                   // 11: customer.onboarding.QuestionsAndAnswers
	(*Mifid)(nil),                                 // 12: customer.onboarding.Mifid
	(*SaveMifidResponse)(nil),                     // 13: customer.onboarding.SaveMifidResponse
	(*NormalizeAddressRequest)(nil),               // 14: customer.onboarding.NormalizeAddressRequest
	(*UserEnteredAddress)(nil),                    // 15: customer.onboarding.UserEnteredAddress
	(*NormalizedAddress)(nil),                     // 16: customer.onboarding.NormalizedAddress
	(*UpdateImageRequest)(nil),                    // 17: customer.onboarding.UpdateImageRequest
	(*Profession)(nil),                            // 18: customer.onboarding.Profession
	(*Declarations)(nil),                          // 19: customer.onboarding.Declarations
	(*IdentityDocument)(nil),                      // 20: customer.onboarding.IdentityDocument
	(*WelcomeStatusReply)(nil),                    // 21: customer.onboarding.WelcomeStatusReply
	(*SetOpenAccountRequest)(nil),                 // 22: customer.onboarding.SetOpenAccountRequest
	(*SetPersonalDataRequest)(nil),                // 23: customer.onboarding.SetPersonalDataRequest
	(*GetEntireDomainInfoResponse)(nil),           // 24: customer.onboarding.GetEntireDomainInfoResponse
	(*CreateFlowRequest)(nil),                     // 25: customer.onboarding.CreateFlowRequest
	(*CheckFlowExistsRequest)(nil),                // 26: customer.onboarding.CheckFlowExistsRequest
	(*GetFlowRequest)(nil),                        // 27: customer.onboarding.GetFlowRequest
	(*GetFlowResponse)(nil),                       // 28: customer.onboarding.GetFlowResponse
	(*GetIdentityDocumentRequest)(nil),            // 29: customer.onboarding.GetIdentityDocumentRequest
	(*GetIdentityDocumentResponse)(nil),           // 30: customer.onboarding.GetIdentityDocumentResponse
	(*CreateProcedureAndUpdateFlowRequest)(nil),   // 31: customer.onboarding.CreateProcedureAndUpdateFlowRequest
	(*NormalizeAddressAndUpdateFlowRequest)(nil),  // 32: customer.onboarding.NormalizeAddressAndUpdateFlowRequest
	(*UpdateImageAndFlowRequest)(nil),             // 33: customer.onboarding.UpdateImageAndFlowRequest
	(*SaveMifidAndUpdateFlowRequest)(nil),         // 34: customer.onboarding.SaveMifidAndUpdateFlowRequest
	(*SetPersonalDataAndUpdateFlowRequest)(nil),   // 35: customer.onboarding.SetPersonalDataAndUpdateFlowRequest
	(*VerifyOtpCodeAndUpdateFlowRequest)(nil),     // 36: customer.onboarding.VerifyOtpCodeAndUpdateFlowRequest
	(*SetOpenAccountAndUpdateFlowRequest)(nil),    // 37: customer.onboarding.SetOpenAccountAndUpdateFlowRequest
	(*UpdateFlowRequest)(nil),                     // 38: customer.onboarding.UpdateFlowRequest
	(*DeleteFlowRequest)(nil),                     // 39: customer.onboarding.DeleteFlowRequest
	(*CheckAdditionalMifidQuestionsRequest)(nil),  // 40: customer.onboarding.CheckAdditionalMifidQuestionsRequest
	(*MifidCustomer)(nil),                         // 41: customer.onboarding.MifidCustomer
	(*CheckAdditionalMifidQuestionsResponse)(nil), // 42: customer.onboarding.CheckAdditionalMifidQuestionsResponse
	(*Attivita)(nil),                              // 43: customer.onboarding.Attivita
	(*Ateco)(nil),                                 // 44: customer.onboarding.Ateco
	(*Sae)(nil),                                   // 45: customer.onboarding.Sae
	(*Toponimo)(nil),                              // 46: customer.onboarding.Toponimo
	(*Province)(nil),                              // 47: customer.onboarding.Province
	(*Localita)(nil),                              // 48: customer.onboarding.Localita
	(*Nazioni)(nil),                               // 49: customer.onboarding.Nazioni
	(*Settori)(nil),                               // 50: customer.onboarding.Settori
	(*Relazioneaffari)(nil),                       // 51: customer.onboarding.Relazioneaffari
	(*Professioni)(nil),                           // 52: customer.onboarding.Professioni
	(*Segmento)(nil),                              // 53: customer.onboarding.Segmento
	(*Originefondi)(nil),                          // 54: customer.onboarding.Originefondi
	(*Titolodistudio)(nil),                        // 55: customer.onboarding.Titolodistudio
	(*Anadoc)(nil),                                // 56: customer.onboarding.Anadoc
	(*Titolarita)(nil),                            // 57: customer.onboarding.Titolarita
	(*Scoporapporto)(nil),                         // 58: customer.onboarding.Scoporapporto
	(*Periodicita)(nil),                           // 59: customer.onboarding.Periodicita
	(*Operatoretelefonico)(nil),                   // 60: customer.onboarding.Operatoretelefonico
	(*Naturarapporto)(nil),                        // 61: customer.onboarding.Naturarapporto
	(*Formato)(nil),                               // 62: customer.onboarding.Formato
	(*Categoriacondizioni)(nil),                   // 63: customer.onboarding.Categoriacondizioni
	(*Categoriacliente)(nil),                      // 64: customer.onboarding.Categoriacliente
	(*Rapportopb)(nil),                            // 65: customer.onboarding.Rapportopb
	(*Mezzoconsegna)(nil),                         // 66: customer.onboarding.Mezzoconsegna
	(*Adeguataverifica)(nil),                      // 67: customer.onboarding.Adeguataverifica
	(*Filiali)(nil),                               // 68: customer.onboarding.Filiali
	(*Modalitaco)(nil),                            // 69: customer.onboarding.Modalitaco
	(*Sesso)(nil),                                 // 70: customer.onboarding.Sesso
	(*Opzionipossibili)(nil),                      // 71: customer.onboarding.Opzionipossibili
	(*Rispostepossibili)(nil),                     // 72: customer.onboarding.Rispostepossibili
	(*Coppiadomandarispostamifid)(nil),            // 73: customer.onboarding.Coppiadomandarispostamifid
	(*Opzionipossibili1)(nil),                     // 74: customer.onboarding.Opzionipossibili1
	(*Rispostepossibili1)(nil),                    // 75: customer.onboarding.Rispostepossibili1
	(*Coppiadomandarispostaqavpb)(nil),            // 76: customer.onboarding.Coppiadomandarispostaqavpb
	(*Classepatrimonio)(nil),                      // 77: customer.onboarding.Classepatrimonio
	(*Modalitapagamento)(nil),                     // 78: customer.onboarding.Modalitapagamento
	(*Livelloagevolazione)(nil),                   // 79: customer.onboarding.Livelloagevolazione
	(*Livelloagevolazionetrim)(nil),               // 80: customer.onboarding.Livelloagevolazionetrim
	(*Listabanche)(nil),                           // 81: customer.onboarding.Listabanche
	(*Iniziativecommerciali)(nil),                 // 82: customer.onboarding.Iniziativecommerciali
	(*Listaisin)(nil),                             // 83: customer.onboarding.Listaisin
	(*Rapportocointestatari)(nil),                 // 84: customer.onboarding.Rapportocointestatari
	(*Ordiniaddebito)(nil),                        // 85: customer.onboarding.Ordiniaddebito
	(*Prefissiinternazionali)(nil),                // 86: customer.onboarding.Prefissiinternazionali
	(*Circuitipagamento)(nil),                     // 87: customer.onboarding.Circuitipagamento
	(*structpb.Struct)(nil),                       // 88: google.protobuf.Struct
	(*emptypb.Empty)(nil),                         // 89: google.protobuf.Empty
}
var file_v1_CustomerOnboardingService_proto_depIdxs = []int32{
	1,   // 0: customer.onboarding.VerifyOtpCodeRequest.account_type:type_name -> customer.onboarding.AccountType
	1,   // 1: customer.onboarding.SendOtpCodeRequest.account_type:type_name -> customer.onboarding.AccountType
	1,   // 2: customer.onboarding.CreateProcedureRequest.account_type:type_name -> customer.onboarding.AccountType
	0,   // 3: customer.onboarding.StatusReply.status:type_name -> customer.onboarding.ServiceStatus
	1,   // 4: customer.onboarding.SaveMifidRequest.account_type:type_name -> customer.onboarding.AccountType
	12,  // 5: customer.onboarding.SaveMifidRequest.mifid:type_name -> customer.onboarding.Mifid
	10,  // 6: customer.onboarding.QuestionsAndAnswers.answers:type_name -> customer.onboarding.Answer
	11,  // 7: customer.onboarding.Mifid.questionsAndAnswers:type_name -> customer.onboarding.QuestionsAndAnswers
	15,  // 8: customer.onboarding.NormalizeAddressRequest.address:type_name -> customer.onboarding.UserEnteredAddress
	1,   // 9: customer.onboarding.NormalizeAddressRequest.account_type:type_name -> customer.onboarding.AccountType
	1,   // 10: customer.onboarding.UpdateImageRequest.account_type:type_name -> customer.onboarding.AccountType
	0,   // 11: customer.onboarding.WelcomeStatusReply.status:type_name -> customer.onboarding.ServiceStatus
	1,   // 12: customer.onboarding.SetOpenAccountRequest.account_type:type_name -> customer.onboarding.AccountType
	20,  // 13: customer.onboarding.SetOpenAccountRequest.personal_document:type_name -> customer.onboarding.IdentityDocument
	16,  // 14: customer.onboarding.SetOpenAccountRequest.address:type_name -> customer.onboarding.NormalizedAddress
	1,   // 15: customer.onboarding.SetPersonalDataRequest.account_type:type_name -> customer.onboarding.AccountType
	16,  // 16: customer.onboarding.SetPersonalDataRequest.normalized_address:type_name -> customer.onboarding.NormalizedAddress
	18,  // 17: customer.onboarding.SetPersonalDataRequest.profession:type_name -> customer.onboarding.Profession
	19,  // 18: customer.onboarding.SetPersonalDataRequest.declarations:type_name -> customer.onboarding.Declarations
	20,  // 19: customer.onboarding.SetPersonalDataRequest.identity_document:type_name -> customer.onboarding.IdentityDocument
	16,  // 20: customer.onboarding.SetPersonalDataRequest.contract_address:type_name -> customer.onboarding.NormalizedAddress
	43,  // 21: customer.onboarding.GetEntireDomainInfoResponse.attivita:type_name -> customer.onboarding.Attivita
	44,  // 22: customer.onboarding.GetEntireDomainInfoResponse.ateco:type_name -> customer.onboarding.Ateco
	45,  // 23: customer.onboarding.GetEntireDomainInfoResponse.sae:type_name -> customer.onboarding.Sae
	46,  // 24: customer.onboarding.GetEntireDomainInfoResponse.toponimo:type_name -> customer.onboarding.Toponimo
	47,  // 25: customer.onboarding.GetEntireDomainInfoResponse.province:type_name -> customer.onboarding.Province
	48,  // 26: customer.onboarding.GetEntireDomainInfoResponse.localita:type_name -> customer.onboarding.Localita
	49,  // 27: customer.onboarding.GetEntireDomainInfoResponse.nazioni:type_name -> customer.onboarding.Nazioni
	50,  // 28: customer.onboarding.GetEntireDomainInfoResponse.settori:type_name -> customer.onboarding.Settori
	51,  // 29: customer.onboarding.GetEntireDomainInfoResponse.relazioneAffari:type_name -> customer.onboarding.Relazioneaffari
	52,  // 30: customer.onboarding.GetEntireDomainInfoResponse.professioni:type_name -> customer.onboarding.Professioni
	53,  // 31: customer.onboarding.GetEntireDomainInfoResponse.segmento:type_name -> customer.onboarding.Segmento
	54,  // 32: customer.onboarding.GetEntireDomainInfoResponse.origineFondi:type_name -> customer.onboarding.Originefondi
	55,  // 33: customer.onboarding.GetEntireDomainInfoResponse.titoloDiStudio:type_name -> customer.onboarding.Titolodistudio
	56,  // 34: customer.onboarding.GetEntireDomainInfoResponse.anaDoc:type_name -> customer.onboarding.Anadoc
	57,  // 35: customer.onboarding.GetEntireDomainInfoResponse.titolarita:type_name -> customer.onboarding.Titolarita
	58,  // 36: customer.onboarding.GetEntireDomainInfoResponse.scopoRapporto:type_name -> customer.onboarding.Scoporapporto
	59,  // 37: customer.onboarding.GetEntireDomainInfoResponse.periodicita:type_name -> customer.onboarding.Periodicita
	60,  // 38: customer.onboarding.GetEntireDomainInfoResponse.operatoreTelefonico:type_name -> customer.onboarding.Operatoretelefonico
	61,  // 39: customer.onboarding.GetEntireDomainInfoResponse.naturaRapporto:type_name -> customer.onboarding.Naturarapporto
	62,  // 40: customer.onboarding.GetEntireDomainInfoResponse.formato:type_name -> customer.onboarding.Formato
	63,  // 41: customer.onboarding.GetEntireDomainInfoResponse.categoriaCondizioni:type_name -> customer.onboarding.Categoriacondizioni
	64,  // 42: customer.onboarding.GetEntireDomainInfoResponse.categoriaCliente:type_name -> customer.onboarding.Categoriacliente
	65,  // 43: customer.onboarding.GetEntireDomainInfoResponse.rapportoPb:type_name -> customer.onboarding.Rapportopb
	66,  // 44: customer.onboarding.GetEntireDomainInfoResponse.mezzoConsegna:type_name -> customer.onboarding.Mezzoconsegna
	67,  // 45: customer.onboarding.GetEntireDomainInfoResponse.adeguataVerifica:type_name -> customer.onboarding.Adeguataverifica
	68,  // 46: customer.onboarding.GetEntireDomainInfoResponse.filiali:type_name -> customer.onboarding.Filiali
	69,  // 47: customer.onboarding.GetEntireDomainInfoResponse.modalitaCo:type_name -> customer.onboarding.Modalitaco
	70,  // 48: customer.onboarding.GetEntireDomainInfoResponse.sesso:type_name -> customer.onboarding.Sesso
	73,  // 49: customer.onboarding.GetEntireDomainInfoResponse.coppiaDomandaRispostaMifid:type_name -> customer.onboarding.Coppiadomandarispostamifid
	76,  // 50: customer.onboarding.GetEntireDomainInfoResponse.coppiaDomandaRispostaQavPb:type_name -> customer.onboarding.Coppiadomandarispostaqavpb
	77,  // 51: customer.onboarding.GetEntireDomainInfoResponse.classePatrimonio:type_name -> customer.onboarding.Classepatrimonio
	78,  // 52: customer.onboarding.GetEntireDomainInfoResponse.modalitaPagamento:type_name -> customer.onboarding.Modalitapagamento
	79,  // 53: customer.onboarding.GetEntireDomainInfoResponse.livelloAgevolazione:type_name -> customer.onboarding.Livelloagevolazione
	80,  // 54: customer.onboarding.GetEntireDomainInfoResponse.livelloAgevolazioneTrim:type_name -> customer.onboarding.Livelloagevolazionetrim
	81,  // 55: customer.onboarding.GetEntireDomainInfoResponse.listaBanche:type_name -> customer.onboarding.Listabanche
	82,  // 56: customer.onboarding.GetEntireDomainInfoResponse.iniziativeCommerciali:type_name -> customer.onboarding.Iniziativecommerciali
	83,  // 57: customer.onboarding.GetEntireDomainInfoResponse.listaIsin:type_name -> customer.onboarding.Listaisin
	84,  // 58: customer.onboarding.GetEntireDomainInfoResponse.rapportoCointestatari:type_name -> customer.onboarding.Rapportocointestatari
	85,  // 59: customer.onboarding.GetEntireDomainInfoResponse.ordiniAddebito:type_name -> customer.onboarding.Ordiniaddebito
	86,  // 60: customer.onboarding.GetEntireDomainInfoResponse.prefissiInternazionali:type_name -> customer.onboarding.Prefissiinternazionali
	87,  // 61: customer.onboarding.GetEntireDomainInfoResponse.circuitiPagamento:type_name -> customer.onboarding.Circuitipagamento
	88,  // 62: customer.onboarding.CreateFlowRequest.payload:type_name -> google.protobuf.Struct
	88,  // 63: customer.onboarding.GetFlowResponse.create_flow:type_name -> google.protobuf.Struct
	88,  // 64: customer.onboarding.GetFlowResponse.create_procedure:type_name -> google.protobuf.Struct
	88,  // 65: customer.onboarding.GetFlowResponse.home_address:type_name -> google.protobuf.Struct
	88,  // 66: customer.onboarding.GetFlowResponse.mail_address:type_name -> google.protobuf.Struct
	88,  // 67: customer.onboarding.GetFlowResponse.sae_ateco:type_name -> google.protobuf.Struct
	88,  // 68: customer.onboarding.GetFlowResponse.pep_us_residency:type_name -> google.protobuf.Struct
	88,  // 69: customer.onboarding.GetFlowResponse.mifid:type_name -> google.protobuf.Struct
	88,  // 70: customer.onboarding.GetFlowResponse.banco_card_details:type_name -> google.protobuf.Struct
	88,  // 71: customer.onboarding.GetFlowResponse.personal_data:type_name -> google.protobuf.Struct
	88,  // 72: customer.onboarding.GetFlowResponse.customer_info:type_name -> google.protobuf.Struct
	88,  // 73: customer.onboarding.GetFlowResponse.customer_residency:type_name -> google.protobuf.Struct
	88,  // 74: customer.onboarding.GetFlowResponse.politically_exposed:type_name -> google.protobuf.Struct
	88,  // 75: customer.onboarding.GetFlowResponse.pep_us_residency_conditions:type_name -> google.protobuf.Struct
	88,  // 76: customer.onboarding.GetFlowResponse.contract_details:type_name -> google.protobuf.Struct
	88,  // 77: customer.onboarding.GetFlowResponse.mifid_question_answers:type_name -> google.protobuf.Struct
	88,  // 78: customer.onboarding.GetIdentityDocumentResponse.identity_document:type_name -> google.protobuf.Struct
	5,   // 79: customer.onboarding.CreateProcedureAndUpdateFlowRequest.payload:type_name -> customer.onboarding.CreateProcedureRequest
	14,  // 80: customer.onboarding.NormalizeAddressAndUpdateFlowRequest.payload:type_name -> customer.onboarding.NormalizeAddressRequest
	17,  // 81: customer.onboarding.UpdateImageAndFlowRequest.payload:type_name -> customer.onboarding.UpdateImageRequest
	9,   // 82: customer.onboarding.SaveMifidAndUpdateFlowRequest.payload:type_name -> customer.onboarding.SaveMifidRequest
	23,  // 83: customer.onboarding.SetPersonalDataAndUpdateFlowRequest.payload:type_name -> customer.onboarding.SetPersonalDataRequest
	2,   // 84: customer.onboarding.VerifyOtpCodeAndUpdateFlowRequest.payload:type_name -> customer.onboarding.VerifyOtpCodeRequest
	22,  // 85: customer.onboarding.SetOpenAccountAndUpdateFlowRequest.payload:type_name -> customer.onboarding.SetOpenAccountRequest
	88,  // 86: customer.onboarding.UpdateFlowRequest.payload:type_name -> google.protobuf.Struct
	1,   // 87: customer.onboarding.CheckAdditionalMifidQuestionsRequest.account_type:type_name -> customer.onboarding.AccountType
	41,  // 88: customer.onboarding.CheckAdditionalMifidQuestionsRequest.customer:type_name -> customer.onboarding.MifidCustomer
	11,  // 89: customer.onboarding.CheckAdditionalMifidQuestionsRequest.questions_and_answers:type_name -> customer.onboarding.QuestionsAndAnswers
	71,  // 90: customer.onboarding.Rispostepossibili.opzioniPossibili:type_name -> customer.onboarding.Opzionipossibili
	72,  // 91: customer.onboarding.Coppiadomandarispostamifid.rispostePossibili:type_name -> customer.onboarding.Rispostepossibili
	74,  // 92: customer.onboarding.Rispostepossibili1.opzioniPossibili:type_name -> customer.onboarding.Opzionipossibili1
	75,  // 93: customer.onboarding.Coppiadomandarispostaqavpb.rispostePossibili:type_name -> customer.onboarding.Rispostepossibili1
	89,  // 94: customer.onboarding.CustomerOnboardingService.GetStatus:input_type -> google.protobuf.Empty
	89,  // 95: customer.onboarding.CustomerOnboardingService.GetEntireDomainInfo:input_type -> google.protobuf.Empty
	5,   // 96: customer.onboarding.CustomerOnboardingService.CreateProcedure:input_type -> customer.onboarding.CreateProcedureRequest
	2,   // 97: customer.onboarding.CustomerOnboardingService.VerifyOtpCode:input_type -> customer.onboarding.VerifyOtpCodeRequest
	3,   // 98: customer.onboarding.CustomerOnboardingService.SendOtpCode:input_type -> customer.onboarding.SendOtpCodeRequest
	9,   // 99: customer.onboarding.CustomerOnboardingService.SaveMifid:input_type -> customer.onboarding.SaveMifidRequest
	23,  // 100: customer.onboarding.CustomerOnboardingService.SetPersonalData:input_type -> customer.onboarding.SetPersonalDataRequest
	22,  // 101: customer.onboarding.CustomerOnboardingService.SetOpenAccount:input_type -> customer.onboarding.SetOpenAccountRequest
	14,  // 102: customer.onboarding.CustomerOnboardingService.NormalizeAddress:input_type -> customer.onboarding.NormalizeAddressRequest
	17,  // 103: customer.onboarding.CustomerOnboardingService.UpdateImage:input_type -> customer.onboarding.UpdateImageRequest
	89,  // 104: customer.onboarding.CustomerOnboardingService.GetWelcomeStatus:input_type -> google.protobuf.Empty
	40,  // 105: customer.onboarding.CustomerOnboardingService.CheckAdditionalMifidQuestions:input_type -> customer.onboarding.CheckAdditionalMifidQuestionsRequest
	25,  // 106: customer.onboarding.CustomerOnboardingService.CreateFlow:input_type -> customer.onboarding.CreateFlowRequest
	26,  // 107: customer.onboarding.CustomerOnboardingService.CheckExistingFlow:input_type -> customer.onboarding.CheckFlowExistsRequest
	27,  // 108: customer.onboarding.CustomerOnboardingService.GetFlow:input_type -> customer.onboarding.GetFlowRequest
	29,  // 109: customer.onboarding.CustomerOnboardingService.GetIdentityDocument:input_type -> customer.onboarding.GetIdentityDocumentRequest
	31,  // 110: customer.onboarding.CustomerOnboardingService.CreateProcedureAndUpdateFlow:input_type -> customer.onboarding.CreateProcedureAndUpdateFlowRequest
	32,  // 111: customer.onboarding.CustomerOnboardingService.NormalizeHomeAddressAndUpdateFlow:input_type -> customer.onboarding.NormalizeAddressAndUpdateFlowRequest
	33,  // 112: customer.onboarding.CustomerOnboardingService.UpdateImageAndFlow:input_type -> customer.onboarding.UpdateImageAndFlowRequest
	38,  // 113: customer.onboarding.CustomerOnboardingService.UpdateFlowWithSaeAteco:input_type -> customer.onboarding.UpdateFlowRequest
	38,  // 114: customer.onboarding.CustomerOnboardingService.UpdateFlowWithPepUsResidency:input_type -> customer.onboarding.UpdateFlowRequest
	34,  // 115: customer.onboarding.CustomerOnboardingService.SaveMifidAndUpdateFlow:input_type -> customer.onboarding.SaveMifidAndUpdateFlowRequest
	38,  // 116: customer.onboarding.CustomerOnboardingService.UpdateFlowWithBancoCardDetails:input_type -> customer.onboarding.UpdateFlowRequest
	32,  // 117: customer.onboarding.CustomerOnboardingService.NormalizeMailAddressAndUpdateFlow:input_type -> customer.onboarding.NormalizeAddressAndUpdateFlowRequest
	35,  // 118: customer.onboarding.CustomerOnboardingService.SetPersonalDataAndUpdateFlow:input_type -> customer.onboarding.SetPersonalDataAndUpdateFlowRequest
	36,  // 119: customer.onboarding.CustomerOnboardingService.VerifyOtpCodeAndUpdateFlow:input_type -> customer.onboarding.VerifyOtpCodeAndUpdateFlowRequest
	37,  // 120: customer.onboarding.CustomerOnboardingService.SetOpenAccountAndUpdateFlow:input_type -> customer.onboarding.SetOpenAccountAndUpdateFlowRequest
	38,  // 121: customer.onboarding.CustomerOnboardingService.UpdateFlowWithCustomerInfo:input_type -> customer.onboarding.UpdateFlowRequest
	38,  // 122: customer.onboarding.CustomerOnboardingService.UpdateFlowWithCustomerResidency:input_type -> customer.onboarding.UpdateFlowRequest
	38,  // 123: customer.onboarding.CustomerOnboardingService.UpdateFlowWithPoliticallyExposed:input_type -> customer.onboarding.UpdateFlowRequest
	38,  // 124: customer.onboarding.CustomerOnboardingService.UpdateFlowWithPepUsResidencyConditions:input_type -> customer.onboarding.UpdateFlowRequest
	38,  // 125: customer.onboarding.CustomerOnboardingService.UpdateFlowWithContractDetails:input_type -> customer.onboarding.UpdateFlowRequest
	38,  // 126: customer.onboarding.CustomerOnboardingService.UpdateFlowWithMifidQuestionAnswers:input_type -> customer.onboarding.UpdateFlowRequest
	39,  // 127: customer.onboarding.CustomerOnboardingService.DeleteFlow:input_type -> customer.onboarding.DeleteFlowRequest
	6,   // 128: customer.onboarding.CustomerOnboardingService.GetStatus:output_type -> customer.onboarding.StatusReply
	24,  // 129: customer.onboarding.CustomerOnboardingService.GetEntireDomainInfo:output_type -> customer.onboarding.GetEntireDomainInfoResponse
	8,   // 130: customer.onboarding.CustomerOnboardingService.CreateProcedure:output_type -> customer.onboarding.CreateProcedureResponse
	89,  // 131: customer.onboarding.CustomerOnboardingService.VerifyOtpCode:output_type -> google.protobuf.Empty
	4,   // 132: customer.onboarding.CustomerOnboardingService.SendOtpCode:output_type -> customer.onboarding.SendOtpCodeResponse
	13,  // 133: customer.onboarding.CustomerOnboardingService.SaveMifid:output_type -> customer.onboarding.SaveMifidResponse
	89,  // 134: customer.onboarding.CustomerOnboardingService.SetPersonalData:output_type -> google.protobuf.Empty
	89,  // 135: customer.onboarding.CustomerOnboardingService.SetOpenAccount:output_type -> google.protobuf.Empty
	16,  // 136: customer.onboarding.CustomerOnboardingService.NormalizeAddress:output_type -> customer.onboarding.NormalizedAddress
	89,  // 137: customer.onboarding.CustomerOnboardingService.UpdateImage:output_type -> google.protobuf.Empty
	21,  // 138: customer.onboarding.CustomerOnboardingService.GetWelcomeStatus:output_type -> customer.onboarding.WelcomeStatusReply
	42,  // 139: customer.onboarding.CustomerOnboardingService.CheckAdditionalMifidQuestions:output_type -> customer.onboarding.CheckAdditionalMifidQuestionsResponse
	89,  // 140: customer.onboarding.CustomerOnboardingService.CreateFlow:output_type -> google.protobuf.Empty
	89,  // 141: customer.onboarding.CustomerOnboardingService.CheckExistingFlow:output_type -> google.protobuf.Empty
	28,  // 142: customer.onboarding.CustomerOnboardingService.GetFlow:output_type -> customer.onboarding.GetFlowResponse
	30,  // 143: customer.onboarding.CustomerOnboardingService.GetIdentityDocument:output_type -> customer.onboarding.GetIdentityDocumentResponse
	8,   // 144: customer.onboarding.CustomerOnboardingService.CreateProcedureAndUpdateFlow:output_type -> customer.onboarding.CreateProcedureResponse
	16,  // 145: customer.onboarding.CustomerOnboardingService.NormalizeHomeAddressAndUpdateFlow:output_type -> customer.onboarding.NormalizedAddress
	89,  // 146: customer.onboarding.CustomerOnboardingService.UpdateImageAndFlow:output_type -> google.protobuf.Empty
	89,  // 147: customer.onboarding.CustomerOnboardingService.UpdateFlowWithSaeAteco:output_type -> google.protobuf.Empty
	89,  // 148: customer.onboarding.CustomerOnboardingService.UpdateFlowWithPepUsResidency:output_type -> google.protobuf.Empty
	13,  // 149: customer.onboarding.CustomerOnboardingService.SaveMifidAndUpdateFlow:output_type -> customer.onboarding.SaveMifidResponse
	89,  // 150: customer.onboarding.CustomerOnboardingService.UpdateFlowWithBancoCardDetails:output_type -> google.protobuf.Empty
	16,  // 151: customer.onboarding.CustomerOnboardingService.NormalizeMailAddressAndUpdateFlow:output_type -> customer.onboarding.NormalizedAddress
	89,  // 152: customer.onboarding.CustomerOnboardingService.SetPersonalDataAndUpdateFlow:output_type -> google.protobuf.Empty
	89,  // 153: customer.onboarding.CustomerOnboardingService.VerifyOtpCodeAndUpdateFlow:output_type -> google.protobuf.Empty
	89,  // 154: customer.onboarding.CustomerOnboardingService.SetOpenAccountAndUpdateFlow:output_type -> google.protobuf.Empty
	89,  // 155: customer.onboarding.CustomerOnboardingService.UpdateFlowWithCustomerInfo:output_type -> google.protobuf.Empty
	89,  // 156: customer.onboarding.CustomerOnboardingService.UpdateFlowWithCustomerResidency:output_type -> google.protobuf.Empty
	89,  // 157: customer.onboarding.CustomerOnboardingService.UpdateFlowWithPoliticallyExposed:output_type -> google.protobuf.Empty
	89,  // 158: customer.onboarding.CustomerOnboardingService.UpdateFlowWithPepUsResidencyConditions:output_type -> google.protobuf.Empty
	89,  // 159: customer.onboarding.CustomerOnboardingService.UpdateFlowWithContractDetails:output_type -> google.protobuf.Empty
	89,  // 160: customer.onboarding.CustomerOnboardingService.UpdateFlowWithMifidQuestionAnswers:output_type -> google.protobuf.Empty
	89,  // 161: customer.onboarding.CustomerOnboardingService.DeleteFlow:output_type -> google.protobuf.Empty
	128, // [128:162] is the sub-list for method output_type
	94,  // [94:128] is the sub-list for method input_type
	94,  // [94:94] is the sub-list for extension type_name
	94,  // [94:94] is the sub-list for extension extendee
	0,   // [0:94] is the sub-list for field type_name
}

func init() { file_v1_CustomerOnboardingService_proto_init() }
func file_v1_CustomerOnboardingService_proto_init() {
	if File_v1_CustomerOnboardingService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_CustomerOnboardingService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtpCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOtpCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOtpCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMifidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionsAndAnswers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mifid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMifidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizeAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEnteredAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Declarations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WelcomeStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOpenAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPersonalDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntireDomainInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFlowExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentityDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentityDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcedureAndUpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizeAddressAndUpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageAndFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMifidAndUpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPersonalDataAndUpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtpCodeAndUpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOpenAccountAndUpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAdditionalMifidQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MifidCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAdditionalMifidQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attivita); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ateco); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sae); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toponimo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Province); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Localita); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nazioni); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settori); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relazioneaffari); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Professioni); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segmento); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Originefondi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Titolodistudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anadoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Titolarita); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scoporapporto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Periodicita); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operatoretelefonico); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Naturarapporto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formato); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Categoriacondizioni); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Categoriacliente); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rapportopb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mezzoconsegna); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adeguataverifica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filiali); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modalitaco); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sesso); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Opzionipossibili); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rispostepossibili); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coppiadomandarispostamifid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Opzionipossibili1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rispostepossibili1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coppiadomandarispostaqavpb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Classepatrimonio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modalitapagamento); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Livelloagevolazione); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Livelloagevolazionetrim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listabanche); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iniziativecommerciali); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listaisin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rapportocointestatari); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ordiniaddebito); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefissiinternazionali); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_CustomerOnboardingService_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circuitipagamento); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_CustomerOnboardingService_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_v1_CustomerOnboardingService_proto_msgTypes[26].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_CustomerOnboardingService_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_CustomerOnboardingService_proto_goTypes,
		DependencyIndexes: file_v1_CustomerOnboardingService_proto_depIdxs,
		EnumInfos:         file_v1_CustomerOnboardingService_proto_enumTypes,
		MessageInfos:      file_v1_CustomerOnboardingService_proto_msgTypes,
	}.Build()
	File_v1_CustomerOnboardingService_proto = out.File
	file_v1_CustomerOnboardingService_proto_rawDesc = nil
	file_v1_CustomerOnboardingService_proto_goTypes = nil
	file_v1_CustomerOnboardingService_proto_depIdxs = nil
}
