// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customer_onboarding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerOnboardingServiceClient is the client API for CustomerOnboardingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerOnboardingServiceClient interface {
	//heath check of microservice
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error)
	//provides questions and possible answers for saveMifid
	GetEntireDomainInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEntireDomainInfoResponse, error)
	//creates a customer's draft in Fideuram's database. If a procedureId is passed in the request, then it retrieves all data of a given customer.
	CreateProcedure(ctx context.Context, in *CreateProcedureRequest, opts ...grpc.CallOption) (*CreateProcedureResponse, error)
	//verifies the OTP the user has provided
	VerifyOtpCode(ctx context.Context, in *VerifyOtpCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//sends an OTP to the user
	SendOtpCode(ctx context.Context, in *SendOtpCodeRequest, opts ...grpc.CallOption) (*SendOtpCodeResponse, error)
	//saves the responses of the user about the mifid questionnaire
	SaveMifid(ctx context.Context, in *SaveMifidRequest, opts ...grpc.CallOption) (*SaveMifidResponse, error)
	//saves user's personal data
	SetPersonalData(ctx context.Context, in *SetPersonalDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//last step of the onboarding, starts the procedure to complete the user's onboarding
	SetOpenAccount(ctx context.Context, in *SetOpenAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//normalizes the address according to Fideuram's standards
	NormalizeAddress(ctx context.Context, in *NormalizeAddressRequest, opts ...grpc.CallOption) (*NormalizedAddress, error)
	//saves the ID documents of the user
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//returns the status of the Welcome API
	GetWelcomeStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WelcomeStatusReply, error)
	//returns whether to show to the user additial mifid questions
	CheckAdditionalMifidQuestions(ctx context.Context, in *CheckAdditionalMifidQuestionsRequest, opts ...grpc.CallOption) (*CheckAdditionalMifidQuestionsResponse, error)
	// Resume onboarding
	CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckExistingFlow(ctx context.Context, in *CheckFlowExistsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error)
	GetIdentityDocument(ctx context.Context, in *GetIdentityDocumentRequest, opts ...grpc.CallOption) (*GetIdentityDocumentResponse, error)
	CreateProcedureAndUpdateFlow(ctx context.Context, in *CreateProcedureAndUpdateFlowRequest, opts ...grpc.CallOption) (*CreateProcedureResponse, error)
	NormalizeHomeAddressAndUpdateFlow(ctx context.Context, in *NormalizeAddressAndUpdateFlowRequest, opts ...grpc.CallOption) (*NormalizedAddress, error)
	UpdateImageAndFlow(ctx context.Context, in *UpdateImageAndFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithSaeAteco(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithPepUsResidency(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SaveMifidAndUpdateFlow(ctx context.Context, in *SaveMifidAndUpdateFlowRequest, opts ...grpc.CallOption) (*SaveMifidResponse, error)
	UpdateFlowWithBancoCardDetails(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NormalizeMailAddressAndUpdateFlow(ctx context.Context, in *NormalizeAddressAndUpdateFlowRequest, opts ...grpc.CallOption) (*NormalizedAddress, error)
	SetPersonalDataAndUpdateFlow(ctx context.Context, in *SetPersonalDataAndUpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyOtpCodeAndUpdateFlow(ctx context.Context, in *VerifyOtpCodeAndUpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetOpenAccountAndUpdateFlow(ctx context.Context, in *SetOpenAccountAndUpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithCustomerInfo(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithCustomerResidency(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithPoliticallyExposed(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithPepUsResidencyConditions(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithContractDetails(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlowWithMifidQuestionAnswers(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type customerOnboardingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerOnboardingServiceClient(cc grpc.ClientConnInterface) CustomerOnboardingServiceClient {
	return &customerOnboardingServiceClient{cc}
}

func (c *customerOnboardingServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) GetEntireDomainInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEntireDomainInfoResponse, error) {
	out := new(GetEntireDomainInfoResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/GetEntireDomainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) CreateProcedure(ctx context.Context, in *CreateProcedureRequest, opts ...grpc.CallOption) (*CreateProcedureResponse, error) {
	out := new(CreateProcedureResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/CreateProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) VerifyOtpCode(ctx context.Context, in *VerifyOtpCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/VerifyOtpCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SendOtpCode(ctx context.Context, in *SendOtpCodeRequest, opts ...grpc.CallOption) (*SendOtpCodeResponse, error) {
	out := new(SendOtpCodeResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SendOtpCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SaveMifid(ctx context.Context, in *SaveMifidRequest, opts ...grpc.CallOption) (*SaveMifidResponse, error) {
	out := new(SaveMifidResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SaveMifid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SetPersonalData(ctx context.Context, in *SetPersonalDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SetPersonalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SetOpenAccount(ctx context.Context, in *SetOpenAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SetOpenAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) NormalizeAddress(ctx context.Context, in *NormalizeAddressRequest, opts ...grpc.CallOption) (*NormalizedAddress, error) {
	out := new(NormalizedAddress)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/NormalizeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) GetWelcomeStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WelcomeStatusReply, error) {
	out := new(WelcomeStatusReply)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/GetWelcomeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) CheckAdditionalMifidQuestions(ctx context.Context, in *CheckAdditionalMifidQuestionsRequest, opts ...grpc.CallOption) (*CheckAdditionalMifidQuestionsResponse, error) {
	out := new(CheckAdditionalMifidQuestionsResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/CheckAdditionalMifidQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) CheckExistingFlow(ctx context.Context, in *CheckFlowExistsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/CheckExistingFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error) {
	out := new(GetFlowResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/GetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) GetIdentityDocument(ctx context.Context, in *GetIdentityDocumentRequest, opts ...grpc.CallOption) (*GetIdentityDocumentResponse, error) {
	out := new(GetIdentityDocumentResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/GetIdentityDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) CreateProcedureAndUpdateFlow(ctx context.Context, in *CreateProcedureAndUpdateFlowRequest, opts ...grpc.CallOption) (*CreateProcedureResponse, error) {
	out := new(CreateProcedureResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/CreateProcedureAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) NormalizeHomeAddressAndUpdateFlow(ctx context.Context, in *NormalizeAddressAndUpdateFlowRequest, opts ...grpc.CallOption) (*NormalizedAddress, error) {
	out := new(NormalizedAddress)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/NormalizeHomeAddressAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateImageAndFlow(ctx context.Context, in *UpdateImageAndFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateImageAndFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithSaeAteco(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithSaeAteco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithPepUsResidency(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithPepUsResidency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SaveMifidAndUpdateFlow(ctx context.Context, in *SaveMifidAndUpdateFlowRequest, opts ...grpc.CallOption) (*SaveMifidResponse, error) {
	out := new(SaveMifidResponse)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SaveMifidAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithBancoCardDetails(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithBancoCardDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) NormalizeMailAddressAndUpdateFlow(ctx context.Context, in *NormalizeAddressAndUpdateFlowRequest, opts ...grpc.CallOption) (*NormalizedAddress, error) {
	out := new(NormalizedAddress)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/NormalizeMailAddressAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SetPersonalDataAndUpdateFlow(ctx context.Context, in *SetPersonalDataAndUpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SetPersonalDataAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) VerifyOtpCodeAndUpdateFlow(ctx context.Context, in *VerifyOtpCodeAndUpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/VerifyOtpCodeAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) SetOpenAccountAndUpdateFlow(ctx context.Context, in *SetOpenAccountAndUpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/SetOpenAccountAndUpdateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithCustomerInfo(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithCustomerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithCustomerResidency(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithCustomerResidency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithPoliticallyExposed(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithPoliticallyExposed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithPepUsResidencyConditions(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithPepUsResidencyConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithContractDetails(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithContractDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) UpdateFlowWithMifidQuestionAnswers(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithMifidQuestionAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingServiceClient) DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.onboarding.CustomerOnboardingService/DeleteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerOnboardingServiceServer is the server API for CustomerOnboardingService service.
// All implementations must embed UnimplementedCustomerOnboardingServiceServer
// for forward compatibility
type CustomerOnboardingServiceServer interface {
	//heath check of microservice
	GetStatus(context.Context, *emptypb.Empty) (*StatusReply, error)
	//provides questions and possible answers for saveMifid
	GetEntireDomainInfo(context.Context, *emptypb.Empty) (*GetEntireDomainInfoResponse, error)
	//creates a customer's draft in Fideuram's database. If a procedureId is passed in the request, then it retrieves all data of a given customer.
	CreateProcedure(context.Context, *CreateProcedureRequest) (*CreateProcedureResponse, error)
	//verifies the OTP the user has provided
	VerifyOtpCode(context.Context, *VerifyOtpCodeRequest) (*emptypb.Empty, error)
	//sends an OTP to the user
	SendOtpCode(context.Context, *SendOtpCodeRequest) (*SendOtpCodeResponse, error)
	//saves the responses of the user about the mifid questionnaire
	SaveMifid(context.Context, *SaveMifidRequest) (*SaveMifidResponse, error)
	//saves user's personal data
	SetPersonalData(context.Context, *SetPersonalDataRequest) (*emptypb.Empty, error)
	//last step of the onboarding, starts the procedure to complete the user's onboarding
	SetOpenAccount(context.Context, *SetOpenAccountRequest) (*emptypb.Empty, error)
	//normalizes the address according to Fideuram's standards
	NormalizeAddress(context.Context, *NormalizeAddressRequest) (*NormalizedAddress, error)
	//saves the ID documents of the user
	UpdateImage(context.Context, *UpdateImageRequest) (*emptypb.Empty, error)
	//returns the status of the Welcome API
	GetWelcomeStatus(context.Context, *emptypb.Empty) (*WelcomeStatusReply, error)
	//returns whether to show to the user additial mifid questions
	CheckAdditionalMifidQuestions(context.Context, *CheckAdditionalMifidQuestionsRequest) (*CheckAdditionalMifidQuestionsResponse, error)
	// Resume onboarding
	CreateFlow(context.Context, *CreateFlowRequest) (*emptypb.Empty, error)
	CheckExistingFlow(context.Context, *CheckFlowExistsRequest) (*emptypb.Empty, error)
	GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error)
	GetIdentityDocument(context.Context, *GetIdentityDocumentRequest) (*GetIdentityDocumentResponse, error)
	CreateProcedureAndUpdateFlow(context.Context, *CreateProcedureAndUpdateFlowRequest) (*CreateProcedureResponse, error)
	NormalizeHomeAddressAndUpdateFlow(context.Context, *NormalizeAddressAndUpdateFlowRequest) (*NormalizedAddress, error)
	UpdateImageAndFlow(context.Context, *UpdateImageAndFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithSaeAteco(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithPepUsResidency(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	SaveMifidAndUpdateFlow(context.Context, *SaveMifidAndUpdateFlowRequest) (*SaveMifidResponse, error)
	UpdateFlowWithBancoCardDetails(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	NormalizeMailAddressAndUpdateFlow(context.Context, *NormalizeAddressAndUpdateFlowRequest) (*NormalizedAddress, error)
	SetPersonalDataAndUpdateFlow(context.Context, *SetPersonalDataAndUpdateFlowRequest) (*emptypb.Empty, error)
	VerifyOtpCodeAndUpdateFlow(context.Context, *VerifyOtpCodeAndUpdateFlowRequest) (*emptypb.Empty, error)
	SetOpenAccountAndUpdateFlow(context.Context, *SetOpenAccountAndUpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithCustomerInfo(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithCustomerResidency(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithPoliticallyExposed(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithPepUsResidencyConditions(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithContractDetails(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	UpdateFlowWithMifidQuestionAnswers(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error)
	DeleteFlow(context.Context, *DeleteFlowRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCustomerOnboardingServiceServer()
}

// UnimplementedCustomerOnboardingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerOnboardingServiceServer struct {
}

func (UnimplementedCustomerOnboardingServiceServer) GetStatus(context.Context, *emptypb.Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) GetEntireDomainInfo(context.Context, *emptypb.Empty) (*GetEntireDomainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntireDomainInfo not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) CreateProcedure(context.Context, *CreateProcedureRequest) (*CreateProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcedure not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) VerifyOtpCode(context.Context, *VerifyOtpCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpCode not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SendOtpCode(context.Context, *SendOtpCodeRequest) (*SendOtpCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpCode not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SaveMifid(context.Context, *SaveMifidRequest) (*SaveMifidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMifid not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SetPersonalData(context.Context, *SetPersonalDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonalData not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SetOpenAccount(context.Context, *SetOpenAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOpenAccount not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) NormalizeAddress(context.Context, *NormalizeAddressRequest) (*NormalizedAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalizeAddress not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateImage(context.Context, *UpdateImageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) GetWelcomeStatus(context.Context, *emptypb.Empty) (*WelcomeStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWelcomeStatus not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) CheckAdditionalMifidQuestions(context.Context, *CheckAdditionalMifidQuestionsRequest) (*CheckAdditionalMifidQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdditionalMifidQuestions not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) CreateFlow(context.Context, *CreateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) CheckExistingFlow(context.Context, *CheckFlowExistsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExistingFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) GetIdentityDocument(context.Context, *GetIdentityDocumentRequest) (*GetIdentityDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityDocument not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) CreateProcedureAndUpdateFlow(context.Context, *CreateProcedureAndUpdateFlowRequest) (*CreateProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcedureAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) NormalizeHomeAddressAndUpdateFlow(context.Context, *NormalizeAddressAndUpdateFlowRequest) (*NormalizedAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalizeHomeAddressAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateImageAndFlow(context.Context, *UpdateImageAndFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageAndFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithSaeAteco(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithSaeAteco not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithPepUsResidency(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithPepUsResidency not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SaveMifidAndUpdateFlow(context.Context, *SaveMifidAndUpdateFlowRequest) (*SaveMifidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMifidAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithBancoCardDetails(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithBancoCardDetails not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) NormalizeMailAddressAndUpdateFlow(context.Context, *NormalizeAddressAndUpdateFlowRequest) (*NormalizedAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalizeMailAddressAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SetPersonalDataAndUpdateFlow(context.Context, *SetPersonalDataAndUpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonalDataAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) VerifyOtpCodeAndUpdateFlow(context.Context, *VerifyOtpCodeAndUpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpCodeAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) SetOpenAccountAndUpdateFlow(context.Context, *SetOpenAccountAndUpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOpenAccountAndUpdateFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithCustomerInfo(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithCustomerInfo not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithCustomerResidency(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithCustomerResidency not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithPoliticallyExposed(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithPoliticallyExposed not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithPepUsResidencyConditions(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithPepUsResidencyConditions not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithContractDetails(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithContractDetails not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) UpdateFlowWithMifidQuestionAnswers(context.Context, *UpdateFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowWithMifidQuestionAnswers not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) DeleteFlow(context.Context, *DeleteFlowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlow not implemented")
}
func (UnimplementedCustomerOnboardingServiceServer) mustEmbedUnimplementedCustomerOnboardingServiceServer() {
}

// UnsafeCustomerOnboardingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerOnboardingServiceServer will
// result in compilation errors.
type UnsafeCustomerOnboardingServiceServer interface {
	mustEmbedUnimplementedCustomerOnboardingServiceServer()
}

func RegisterCustomerOnboardingServiceServer(s grpc.ServiceRegistrar, srv CustomerOnboardingServiceServer) {
	s.RegisterService(&CustomerOnboardingService_ServiceDesc, srv)
}

func _CustomerOnboardingService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_GetEntireDomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).GetEntireDomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/GetEntireDomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).GetEntireDomainInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_CreateProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).CreateProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/CreateProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).CreateProcedure(ctx, req.(*CreateProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_VerifyOtpCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).VerifyOtpCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/VerifyOtpCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).VerifyOtpCode(ctx, req.(*VerifyOtpCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SendOtpCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SendOtpCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SendOtpCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SendOtpCode(ctx, req.(*SendOtpCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SaveMifid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMifidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SaveMifid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SaveMifid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SaveMifid(ctx, req.(*SaveMifidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SetPersonalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SetPersonalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SetPersonalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SetPersonalData(ctx, req.(*SetPersonalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SetOpenAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOpenAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SetOpenAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SetOpenAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SetOpenAccount(ctx, req.(*SetOpenAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_NormalizeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).NormalizeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/NormalizeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).NormalizeAddress(ctx, req.(*NormalizeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_GetWelcomeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).GetWelcomeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/GetWelcomeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).GetWelcomeStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_CheckAdditionalMifidQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdditionalMifidQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).CheckAdditionalMifidQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/CheckAdditionalMifidQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).CheckAdditionalMifidQuestions(ctx, req.(*CheckAdditionalMifidQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).CreateFlow(ctx, req.(*CreateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_CheckExistingFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFlowExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).CheckExistingFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/CheckExistingFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).CheckExistingFlow(ctx, req.(*CheckFlowExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/GetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).GetFlow(ctx, req.(*GetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_GetIdentityDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).GetIdentityDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/GetIdentityDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).GetIdentityDocument(ctx, req.(*GetIdentityDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_CreateProcedureAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcedureAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).CreateProcedureAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/CreateProcedureAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).CreateProcedureAndUpdateFlow(ctx, req.(*CreateProcedureAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_NormalizeHomeAddressAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeAddressAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).NormalizeHomeAddressAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/NormalizeHomeAddressAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).NormalizeHomeAddressAndUpdateFlow(ctx, req.(*NormalizeAddressAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateImageAndFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageAndFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateImageAndFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateImageAndFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateImageAndFlow(ctx, req.(*UpdateImageAndFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithSaeAteco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithSaeAteco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithSaeAteco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithSaeAteco(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithPepUsResidency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithPepUsResidency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithPepUsResidency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithPepUsResidency(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SaveMifidAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMifidAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SaveMifidAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SaveMifidAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SaveMifidAndUpdateFlow(ctx, req.(*SaveMifidAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithBancoCardDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithBancoCardDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithBancoCardDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithBancoCardDetails(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_NormalizeMailAddressAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeAddressAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).NormalizeMailAddressAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/NormalizeMailAddressAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).NormalizeMailAddressAndUpdateFlow(ctx, req.(*NormalizeAddressAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SetPersonalDataAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonalDataAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SetPersonalDataAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SetPersonalDataAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SetPersonalDataAndUpdateFlow(ctx, req.(*SetPersonalDataAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_VerifyOtpCodeAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpCodeAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).VerifyOtpCodeAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/VerifyOtpCodeAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).VerifyOtpCodeAndUpdateFlow(ctx, req.(*VerifyOtpCodeAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_SetOpenAccountAndUpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOpenAccountAndUpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).SetOpenAccountAndUpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/SetOpenAccountAndUpdateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).SetOpenAccountAndUpdateFlow(ctx, req.(*SetOpenAccountAndUpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithCustomerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithCustomerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithCustomerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithCustomerInfo(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithCustomerResidency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithCustomerResidency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithCustomerResidency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithCustomerResidency(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithPoliticallyExposed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithPoliticallyExposed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithPoliticallyExposed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithPoliticallyExposed(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithPepUsResidencyConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithPepUsResidencyConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithPepUsResidencyConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithPepUsResidencyConditions(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithContractDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithContractDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithContractDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithContractDetails(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_UpdateFlowWithMifidQuestionAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithMifidQuestionAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/UpdateFlowWithMifidQuestionAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).UpdateFlowWithMifidQuestionAnswers(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingService_DeleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingServiceServer).DeleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.onboarding.CustomerOnboardingService/DeleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingServiceServer).DeleteFlow(ctx, req.(*DeleteFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerOnboardingService_ServiceDesc is the grpc.ServiceDesc for CustomerOnboardingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerOnboardingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.onboarding.CustomerOnboardingService",
	HandlerType: (*CustomerOnboardingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _CustomerOnboardingService_GetStatus_Handler,
		},
		{
			MethodName: "GetEntireDomainInfo",
			Handler:    _CustomerOnboardingService_GetEntireDomainInfo_Handler,
		},
		{
			MethodName: "CreateProcedure",
			Handler:    _CustomerOnboardingService_CreateProcedure_Handler,
		},
		{
			MethodName: "VerifyOtpCode",
			Handler:    _CustomerOnboardingService_VerifyOtpCode_Handler,
		},
		{
			MethodName: "SendOtpCode",
			Handler:    _CustomerOnboardingService_SendOtpCode_Handler,
		},
		{
			MethodName: "SaveMifid",
			Handler:    _CustomerOnboardingService_SaveMifid_Handler,
		},
		{
			MethodName: "SetPersonalData",
			Handler:    _CustomerOnboardingService_SetPersonalData_Handler,
		},
		{
			MethodName: "SetOpenAccount",
			Handler:    _CustomerOnboardingService_SetOpenAccount_Handler,
		},
		{
			MethodName: "NormalizeAddress",
			Handler:    _CustomerOnboardingService_NormalizeAddress_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _CustomerOnboardingService_UpdateImage_Handler,
		},
		{
			MethodName: "GetWelcomeStatus",
			Handler:    _CustomerOnboardingService_GetWelcomeStatus_Handler,
		},
		{
			MethodName: "CheckAdditionalMifidQuestions",
			Handler:    _CustomerOnboardingService_CheckAdditionalMifidQuestions_Handler,
		},
		{
			MethodName: "CreateFlow",
			Handler:    _CustomerOnboardingService_CreateFlow_Handler,
		},
		{
			MethodName: "CheckExistingFlow",
			Handler:    _CustomerOnboardingService_CheckExistingFlow_Handler,
		},
		{
			MethodName: "GetFlow",
			Handler:    _CustomerOnboardingService_GetFlow_Handler,
		},
		{
			MethodName: "GetIdentityDocument",
			Handler:    _CustomerOnboardingService_GetIdentityDocument_Handler,
		},
		{
			MethodName: "CreateProcedureAndUpdateFlow",
			Handler:    _CustomerOnboardingService_CreateProcedureAndUpdateFlow_Handler,
		},
		{
			MethodName: "NormalizeHomeAddressAndUpdateFlow",
			Handler:    _CustomerOnboardingService_NormalizeHomeAddressAndUpdateFlow_Handler,
		},
		{
			MethodName: "UpdateImageAndFlow",
			Handler:    _CustomerOnboardingService_UpdateImageAndFlow_Handler,
		},
		{
			MethodName: "UpdateFlowWithSaeAteco",
			Handler:    _CustomerOnboardingService_UpdateFlowWithSaeAteco_Handler,
		},
		{
			MethodName: "UpdateFlowWithPepUsResidency",
			Handler:    _CustomerOnboardingService_UpdateFlowWithPepUsResidency_Handler,
		},
		{
			MethodName: "SaveMifidAndUpdateFlow",
			Handler:    _CustomerOnboardingService_SaveMifidAndUpdateFlow_Handler,
		},
		{
			MethodName: "UpdateFlowWithBancoCardDetails",
			Handler:    _CustomerOnboardingService_UpdateFlowWithBancoCardDetails_Handler,
		},
		{
			MethodName: "NormalizeMailAddressAndUpdateFlow",
			Handler:    _CustomerOnboardingService_NormalizeMailAddressAndUpdateFlow_Handler,
		},
		{
			MethodName: "SetPersonalDataAndUpdateFlow",
			Handler:    _CustomerOnboardingService_SetPersonalDataAndUpdateFlow_Handler,
		},
		{
			MethodName: "VerifyOtpCodeAndUpdateFlow",
			Handler:    _CustomerOnboardingService_VerifyOtpCodeAndUpdateFlow_Handler,
		},
		{
			MethodName: "SetOpenAccountAndUpdateFlow",
			Handler:    _CustomerOnboardingService_SetOpenAccountAndUpdateFlow_Handler,
		},
		{
			MethodName: "UpdateFlowWithCustomerInfo",
			Handler:    _CustomerOnboardingService_UpdateFlowWithCustomerInfo_Handler,
		},
		{
			MethodName: "UpdateFlowWithCustomerResidency",
			Handler:    _CustomerOnboardingService_UpdateFlowWithCustomerResidency_Handler,
		},
		{
			MethodName: "UpdateFlowWithPoliticallyExposed",
			Handler:    _CustomerOnboardingService_UpdateFlowWithPoliticallyExposed_Handler,
		},
		{
			MethodName: "UpdateFlowWithPepUsResidencyConditions",
			Handler:    _CustomerOnboardingService_UpdateFlowWithPepUsResidencyConditions_Handler,
		},
		{
			MethodName: "UpdateFlowWithContractDetails",
			Handler:    _CustomerOnboardingService_UpdateFlowWithContractDetails_Handler,
		},
		{
			MethodName: "UpdateFlowWithMifidQuestionAnswers",
			Handler:    _CustomerOnboardingService_UpdateFlowWithMifidQuestionAnswers_Handler,
		},
		{
			MethodName: "DeleteFlow",
			Handler:    _CustomerOnboardingService_DeleteFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/MyTest.proto",
}
